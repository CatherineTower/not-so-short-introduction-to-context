%%% File:     b06_Fonts.mkiv
%%% Author:   Joaquín Ataz-López
%%% Begun:    March 2020
%%% Concluded: June 2020
%%% Title:  This chapter was the first chapter I began. I came back to
%%%         it often because I wanted it to include the use of
%%%         fonts installed on our system. But I didn't
%%%         succeed in getting the instructions in the wiki to
%%%         work. Recently (August) I discovered fonttest which
%%%         can be accessed after running mtxrun --script server --auto
%%%         I need to investigate further. This "sees" the fonts
%%%         installed on my system and tells me what code I need
%%%         to use them. But I stll don't understand how it
%%%         works. The key might possibly lie in the "Fonts
%%%         out of ConTeXt" manual, but i struggle to understand it.
%%%
%%% Edited with: Emacs + AuTeX - And at times vim + context-plugin
%%%

\environment ../introCTX_env.mkiv

\startcomponent b06_Fonts.mkiv

\startchapter
  [
    reference=sec:fontscol,
    title=Fonts and colours in\\ \ConTeXt,
    bookmark=Fonts and colours in ConTeXt,
  ]

\TocChap

\startsection
  [title=Typographical fonts included in\\ \suite-]

\ConTeXt's fonts system offers many possibilities, but it also quite
complex. I will not be analysing all the advanced font possibilities in
this manual, but will limit myself to assuming we are working with some
of the 21 fonts provided with the installation of \ConTeXt\ Standalone,
the ones shown in \in{table}[tbl:ctx-fonts].

{\switchtobodyfont[small]
  \placetable
    [here]
    [tbl:ctx-fonts]
    {Fonts included in the \ConTeXt\ distribution}
    \starttabulate[|l|l|w{2cm}|]
      \HL
      \NC{\bf Official name}\NC{\bf Name(s) in \ConTeXt}\NC{\bf Example}\NR
      \HL
      \NC Latin Modern \NC modern, modern-base\NC{\switchtobodyfont[modern] Emily Brontë's book}\NR
      \NC Antykwa Poltawskiego\NC antykwapoltawskiego\NC{\switchtobodyfont[antykwapoltawskiego] Emily Brontë's book}\NR
      \NC Antykwa Toruńska\NC antykwa\NC{\switchtobodyfont[antykwa] Emily Brontë's book}\NR
      \NC Cambria \NC cambria\NC{\switchtobodyfont[cambria] Emily Brontë's book}\NR
      \NC DejaVu\NC dejavu\NC{\switchtobodyfont[dejavu] Emily Brontë's book}\NR
      \NC DejaVu Condensed\NC dejavu-condensed\NC{\switchtobodyfont[dejavu-condensed] Emily Brontë's book}\NR
      \NC Gentium \NC gentium\NC{\switchtobodyfont[gentium] Emily Brontë's book}\NR
      \NC Iwona\NC iwona\NC{\switchtobodyfont[iwona] Emily Brontë's book}\NR
      \NC Latin Modern Variable\NC modernvariable, modern-variable\NC{\switchtobodyfont[modernvariable] Emily Brontë's book}\NR
      \NC PostScript\NC postscript\NC  {\switchtobodyfont[postscript] Emily Brontë's book}\NR
      \NC TeX Gyre Adventor\NC adventor, avantgarde\NC{\switchtobodyfont[adventor] Emily Brontë's book}\NR
      \NC TeX Gyre Bonum\NC bonum, bookman\NC{\switchtobodyfont[bonum] Emily Brontë's book}\NR
      \NC TeX Gyre Cursor\NC cursor, courier\NC{\switchtobodyfont[cursor] Emily Brontë's book}\NR
      \NC TeX Gyre Heros\NC heros, helvetica\NC{\switchtobodyfont[heros] Emily Brontë's book}\NR
      \NC TeX Gyre Schola\NC schola, schoolbook\NC{\switchtobodyfont[schola] Emily Brontë's book}\NR
      \NC Tex Gyre Chorus\NC chorus, chancery\NC{\switchtobodyfont[chorus] Emily Brontë's book}\NR
      \NC Tex Gyre Pagella\NC pagella, palatino\NC{\switchtobodyfont[pagella] Emily Brontë's book}\NR
      \NC Tex Gyre Termes\NC termes, times\NC{\switchtobodyfont[termes] Emily Brontë's book}\NR
      \NC Euler\NC eulernova\NC{\switchtobodyfont[eulernova] Emily Brontë's book}\NR
      \NC Stix2\NC stix\NC{\switchtobodyfont[stix] Emily Brontë's book}\NR
      \NC Xits\NC xits\NC{\switchtobodyfont[xits,8pt] Emily Brontë's book}\NR
      \HL
    \stoptabulate
}

The central column of \in{table}[tbl:ctx-fonts] indicates the name or
names by which \ConTeXt\ knows the font in question. When there are two
names, they are synonymous. The last column has an example of the font
in use. As for the order in which the fonts are shown, the first is the
font that \ConTeXt\ uses by default, and the remaining fonts are in
alphabetical order, while the last three fonts are specifically designed
for mathematics. Note that the Euler font cannot directly represent
accented letters, so we get Bront's, not Brontë's.

For readers coming from the Windows world and its default fonts, I will
indicate that {\em heros} is equivalent to Arial in Windows, while {\em
termes} is the same as Times New Roman. They are not exactly the same
but similar enough, to the point where one would need to be very
observant to tell the difference.

  \startSmallPrint

    Fonts used by Windows are not {\em free software} (in fact almost
    nothing in Windows is {\em free software}), so they cannot be
    included in a \ConTeXt\ distribution. However, if \ConTeXt\ is
    installed in Windows, then these fonts are already installed and can
    be used like any other font installed on the system running
    \ConTeXt. In this introduction, though, I will not deal with how to
    use fonts already installed on the system. Help can be found for
    this on the \goto{\ConTeXt\ wiki}[url(wiki)].
    
  \stopSmallPrint

\stopsection

\startsection
  [title=Font features]

\startsubsection
  [title={Fonts, {\em styles} and style variants}]

The terminology regarding fonts is somewhat confusing, since at times
what is called a font is really a {\em font family} that includes
different styles and variants that share a basic design. I will not
enter into the question of which terminology is the more correct; I am
only interested in clarifying the terminology used in \ConTeXt. There,
it makes a distinction between fonts, styles and variants (or
alternatives) for each style. The {\em fonts} included in the \ConTeXt\
distribution (in fact they are {\em font families}) are the ones we saw
in the previous section. We will look now at {\em styles} and {\em
alternatives}.

\subsubsubject{Font styles}

\dontleavehmode{\sc Donald E. Knuth} designed the {\em Computer Modern}
font for \TeX, giving it three distinct {\em styles} called {\em roman},
{\em sans serif} and {\em teletype}. The {\em roman} style is a design
where the characters have decorative flourishes known in typological
terminology as {\em serifs}, which is why this font style is also known
as {\em serif}. This style was considered to be the {\em normal} or
default style. The {\em sans serif} style, as its name indicates, lacks
these flourishes, and hence is a simpler, more stylised font, sometimes
known by other names, e.g. in Spanish, {\em paloseco}; this font can be
the principal font in the document, but it is also appropriate for use
in certain fragments of a text whose principal font is in {\em roman}
style, like, for example, title or page headers. Finally, the {\em
teletype} style was included in {\em Computer Roman} since this had been
designed for writing books to do with computer programming, involving
large sections in computer {\em code} which is conventionally
represented, in printed material, in a monospaced style that imitates
computer terminals and the old typewriters.

  \startSmallPrint

    A fourth style intended for maths fragments could be added to these
    three font {\em styles}. But since \TeX\ automatically uses this
    style when it enters maths mode, and does not include commands to
    expressly enable or disable it, nor does it have the {\em variants}
    or alternatives of the other styles, it is not usual to think of it
    as a {\em style} properly so called.

    \ConTeXt\ includes commands for two possible additional styles:
  handwritten and calligraphic. I am not exactly sure about the
  difference between them since, on the one hand, none of the fonts
  included in the \ConTeXt\ distribution include these styles in their
  design, and on the other hand, as I see it, calligraphic writing is
  also handwritten. These commands that \ConTeXt\ includes to enable
  such styles, if used with a font that does not implement them, will
  not cause any error when compiling: it is simply that nothing happens.
  
  \stopSmallPrint

\subsubsubject{Alternative font forms}

Each {\em style} allows a number of alternative forms, and that is what
\ConTeXt\ calls them, ({\em alternative}):

\startitemize[2,packed]

\item Regular or normal (\MyKey{tf}, from {\em typeface}).
\item Bold (\MyKey{bf}, from {\em boldface}).
\item Italic (\MyKey{it} from {\em italic})
\item BoldItalic (\MyKey{bi} from {\em bold italic})
\item Slanted (\MyKey{sl} from {\em slanted})
\item BoldSlanted (\MyKey{bs} from {\em bold slanted})
\item Small caps (\MyKey{sc} from {\em small caps})
\item Medieval (\MyKey{os} from {\em old style})
  
\stopitemize

These {\em alternatives}, as their name indicates, are mutually
exclusive: when one is enabled, the others are disabled. This is why
\ConTeXt\ provides commands for enabling them but not for disabling
them; because when we enable an alternative, we disable the one we were
using until then; and so, for example, if we are writing in italic and
enable bold, then italic will be disabled. If we want to use bold and
italic simultaneously, we do not have to enable one and then the other,
but rather enable the alternative that includes both (\MyKey{bi}).

On the other hand, it must be born in mind that although \ConTeXt\
assumes that every font will have these alternatives, and therefore
provides commands to enable them, in order to function and produce some
perceptible effect in the final document, these commands need the font
to have specific forms in their design for each style and alternative.

\startSmallPrint

  In particular, many fonts do not differentiate in their design between
  slanted and italic letters, or do not include special forms for small
  caps.

\stopSmallPrint

\subsubsubject{Difference between italics and slanted}

The similarity in the typographical function performed by italics and
slanted letters leads many people to confuse these two alternatives. The
slanted letter is obtained by slightly rotating the regular shape. But
italics implies -- at least in certain fonts -- a different design in
which the letters {\em seem} to be tilted because they have been drawn
to look like it; but in reality there is no authentic tilt. This can be
seen in the following example, in which we have written the same word
three times at the same size large enough to make it easy to appreciate
the differences. In the first version the regular form is used, in the
second the slanted, and in the third italics:

\midaligned{\switchtobodyfont[20pt,rm] %
  \framed{{\rm italics} -- {\sl italics} -- {\it italics}} }%

Note how the design of the characters is the same in the first two
examples, but in the third there are subtle differences in the strokes
of some letters, which is very obvious, especially in how the \quote{a}
is drawn, although the differences actually occur in almost all
characters.

The usual uses of italic and slanted letters are similar and each person
decides whether to use one or the other. Here there is freedom, although
we should point out that a document will be better typeset and will look
better if the use of italic and slanted lettering is {\em consistent}.
In many fonts, moreover, the design difference between italic and
slanted is negligible, so it makes no difference whether we use one or
the other.

On the other hand, both italic and slanted are font alternatives, which
mainly means two things:

\startitemize[n]

\item We can only use them when they are defined in the font.

\item When enabling one of them we are disabling the alternative that
  was being used up until then.
  
\stopitemize

Together with the commands for italic and slanted, \ConTeXt\ offers an
additional commands for {\em emphasising} a particular text. Its use
implies subtle differences by comparison with italic or slanted. See
\in{section}[sec:emphasis].

\stopsubsection

\startsubsection
  [title=Font size]

All the fonts handled by \ConTeXt{} are based on vector graphics, so
that in theory they can be displayed at any font size, although as we
will see, this depends on the actual instructions we use to determine
font size. Unless otherwise stated, it is assumed that the font size
will be 12 points.

\startSmallPrint

 All fonts used by \ConTeXt{} are based on vector graphics, and are
 therefore Opentype or Type 1 fonts, which implies that fonts whose
 origins predate this technology have been reimplemented. In particular,
 the \TeX\ default font, {\em Computer Modern}, designed by {\sc Knuth},
 only existed in certain sizes, so was reimplemented in a design called
 \emph{Latin Modern} used by \ConTeXt{}, although in many documents it
 continues to be called {\em Computer Modern} due to the strong
 symbolism that font still has for \TeX{} systems, since these started
 out and were developed by {\sc Knuth} along with another program called
 \MetaFont{}, aimed at designing fonts that could work with \TeX{}.

\stopSmallPrint

\stopsubsection

\stopsection

\startsection
  [
    reference=sec:mainfont,
    title=Setting the document's main font,
  ]
\PlaceMacro{setupbodyfont}

By default, unless some other font is indicated, \ConTeXt{} will use
{\em Latin Modern Roman} at 12 point as the main font. This font was
originally designed by {\sc  Knuth} to be implemented in \TeX{}. It is
an elegant roman-style font with great proportional and decorative
\quotation{flourishes} -- called {\em serifs} -- in certain strokes,
which is very appropriate both for printed texts and for display on
screen; although -- and this is a personal opinion -- it is not so
suitable for small screens like the {\em smartphone}, because the {\em
serifs} or flourishes tend to pile up, making reading difficult.

To set up a different font we use \tex{setupbodyfont} that allows us not
only to change the actual font, but also its size and style. When we
want this to apply to the whole document, we need to include it in the
source file's preamble. But if we simply wish to change the font at a
certain point, this is where we need to include what follows.

The \tex{setupbodyfont} format is:

\type{\setupbodyfont[Options]}

where the command's various options allow us to indicate:

\startitemize

\item {\bf The font name}, that can be any of the symbolic font names
found in \in{table}[tbl:ctx-fonts].

\item {\bf The size}, which can be indicated either by its dimensions
(using the point as the unit of measurement) or by certain symbolic
names. But note that even though earlier I said that fonts used by
\ConTeXt{} can be scaled to practically any size, in \tex{setupbodyfont}
only sizes consisting of whole numbers between 4 and 12, as well as the
values 14.4 and 17.3, are supported in \ConTeXt. By default it assumes
the size is 12 points.

  \tex{setupbodyfont}, establishes what we could call the {\em base
  size} of the document; in other words the {\em normal} character size
  on the basis of which other sizes are calculated, for example titles
  and footnotes. When we change the main size with \tex{setupbodyfont}
  all other sizes calculated on the basis of the main font are also
  changed.

Besides directly indicated the character size (10pt, 11pt, 12pt, etc.)
we can also use some symbolic names that calculate the character size to
apply, based on the current size. The symbolic names in question are,
from largest to smallest: big, small, script, x, scriptscript and xx.
So, for example, if we want to set body text with \tex{setupbodyfont}
which is larger than 12 points, we can do so with \MyKey{big}.

\item {\bf font style}, which, just as we have indicated, can be roman
(with serifs), or without serifs (san serif), or typewriter style, and
for some fonts, handwritten and calligraphic style. \tex{setupbodyfont}
allows different symbolic names to indicate different styles. These are
found in table \in[tab:ctx-stylesstbdf]:

  {\switchtobodyfont[script] %
    \placetable %
      [here, force] %
      [tab:ctx-stylesstbdf] %
      {Styles in setupbodyfont} %
      {\startxtable %
        \startxrow [topframe=on, bottomframe=on]%
          \startxcell \bf Style \stopxcell %
          \startxcell \bf Symbolic names allowed\stopxcell %
        \stopxrow %
        \startxrow %
          \startxcell Roman \stopxcell %
          \startxcell \tt rm, roman, serif, regular \stopxcell %
        \stopxrow %
        \startxrow %
          \startxcell Sans Serif \stopxcell %
          \startxcell \tt ss, sans, support, sansserif\stopxcell %
        \stopxrow %
        \startxrow %
          \startxcell Monospaced \stopxcell %
          \startxcell \tt tt, modo, type, teletype \stopxcell %
        \stopxrow %
        \startxrow %
          \startxcell Handwritten \stopxcell %
          \startxcell \tt hw, handwritten \stopxcell %
        \stopxrow %
        \startxrow [bottomframe=on]%
          \startxcell Calligraphic \stopxcell %
          \startxcell \tt cg, calligraphic\stopxcell %
        \stopxrow %
      \stopxtable} %
  }

  As far as I can tell, the different names supported for each of the
 styles are completely synonymous.
 
\stopitemize

\startsubsubject
  [
    reference=sec:see-font,
    title=See what a font looks like,
  ]

Before deciding to use a particular font in our document, we would
normally want to see what it looks like. This can almost always be done
from the operating system as there is usually some utility to examine
the appearance of the fonts installed on the system; but for
convenience, \ConTeXt{} itself offers a utility that allows us to see
the appearance of any of the fonts enabled in \ConTeXt{}. This is
\tex{showbodyfont}, that generates a table with examples of the font we
indicate.

The format of \tex{showbodyfont} is as follows:

\type{\showbodyfont [Options]}

where we can indicate as options precisely the same symbolic names as in
\tex{setupbodyfont}. So, for example, \tex{showbodyfont[schola, 8pt]}
will show us the table below, in which there are different examples of
the schola font at a base size of 8 points:

\showbodyfont[schola,8pt]\bigskip

Note that there are certain commands in the first row and column of the
table. Further on, when the meaning of these commands has been
explained, we will take another look at the tables generated by
\tex{showbodyfont}.

If we want to see the complete range of characters in a specific font,
we can use the \PlaceMacro{showfont}\tex{showfont[FontName]} command.
This command will show the main design of each of the characters without
applying commands for styles and alternatives.

\stopsubsubject

\stopsection

\startsection
  [title=Changing font or some font features]

\startsubsection
  [title=The \tex{setupbodyfont} and \tex{switchtobodyfont} commands]
\PlaceMacro{switchtobodyfont}\PlaceMacro{setupbodyfont}

To change font, style or size, we can use the same command with which we
established the font at the beginning of the document, when we don't
want to use \ConTeXt's default font: \tex{setupbodyfont}. All we need to
do is to place this command at the point in the document where we wish
to change font. It will produce a {\em permanent} change of font,
meaning that it will directly affect the main font, and indirectly all
fonts related to it.

Very similar to \tex{setupbodyfont} is \tex{switchtobodyfont}. Both
commands allow us to change the same aspects of the font (the font
itself, style and size) but internally they function differently and are
intended for different uses. The first one, (\tex{setupbodyfont}) is
meant for {\em establishing} the main font (and normally the only one)
in the document; it is neither common nor typographically correct for a
document to have more than one main font (which is why it is called {\em
main} font). By contrast, \tex{switchtobodyfont} is intended for writing
some parts of a text in a different font, or to assign a particular font
to a special kind of paragraph we want to define in our document.

Apart from the above -- which actually affects the internal functioning
of each of these two commands -- from the user's point of view there are
some differences between the use of one or the other command. In
particular:

\startitemize[n]

\item As we already know \tex{setupbodyfont} is limited to a particular
range of sizes, whereas \tex{switchtobodyfont} allows us to indicate
practically any size, so that if the font is not available in that size,
it will scale to it.

\item \tex{switchtobodyfont} does not affect text elements in any way
other than where it is used, unlike \tex{setupbodyfont} which, as
mentioned above, establishes the main font and, by altering this, also
alters the font of all textual elements whose font is calculated on the
basis of the main font.

\stopitemize

Both commands, on the other hand, change not only the font, style and
size, but also other aspects associated with the font such as, for
example, interline space.

\startSmallPrint

  \tex{setupbodyfont} generates a compiling error if a non-allowed font
  size is requested; but does not generate one if a non-existent font is
  requested, in which case the default ({\em Latin Modern Roman}) font
  will be enabled. \tex{switchtobodyfont} acts the same way with regard
  to the font, and in terms of size, as I have already said, tries to
  achieve this by scaling the font. However, there are fonts that cannot
  be scaled to certain sizes, in which case the default font would once
  again be enabled.

\stopSmallPrint

\stopsubsection

\startsubsection
  [
    reference=sec:quick-change,
    title={Quickly changing style, alternative and size},
  ]

\subsubsubject{Changing style and alternative}

As well as \tex{switchtobodyfont}, \ConTeXt\ provides a set of commands
that allow us to quickly change the style, alternative or size. With
regard to these commands, the \ConTeXt\ wiki warns us that sometimes,
when they appear at the beginning of a paragraph, they can produce some
unwanted side effects, so it recommends that in such cases the command
in question be preceded by the
\PlaceMacro{dontleavehmode}\tex{dontleavehmode} command.

{\switchtobodyfont[small] %
\placetable[here][tab:ctx-styles]
  {Commands for changing between different styles}
  {
    \starttabulate[|l|l|]
      \HL
      \NC {\bf Style} \NC {\bf Commands that enable it}\NR
      \HL
      \NC Roman\NC\type{\rm}, \type{\roman}, \type{\serif}, \type{\regular}\NR\PlaceMacro{rm}\PlaceMacro{roman}\PlaceMacro{serif}\PlaceMacro{regular}
      \NC Sans Serif\NC\type{\ss}, \type{\sans}, \type{\support}, \type{\sansserif}\NR\PlaceMacro{ss}\PlaceMacro{sans}\PlaceMacro{support}\PlaceMacro{sansserif}
      \NC Monospaced\NC\type{\tt}, \type{\mono}, \type{\teletype},\NR\PlaceMacro{tt}\PlaceMacro{mono}\PlaceMacro{teletype}
      \NC Handwritten\NC\type{\hw}, \type{\handwritten},\NR\PlaceMacro{hw}\PlaceMacro{handwritten}
      \NC Calligraphic\NC\type{\cf}, \type{\calligraphic}\PlaceMacro{cf}\PlaceMacro{calligraphic}\NR
      \HL
    \stoptabulate
  }}


\in{Table}[tab:ctx-styles] contains the commands that allow us to change
style, without altering any other aspect; and
\in{table}[tab:ctx-alternatives] contains the commands that allow us to
exclusively alter the alternative.


{\switchtobodyfont[small] %
  \placetable[here][tab:ctx-alternatives]
  {Commands for enabling a particular alternative}
  {
    \starttabulate[|l|l|]
      \HL
      \NC {\bf Alternative} \NC {\bf Commands that enable it}\NR
      \HL
      \NC Normal           \NC\type{\tf}, \type{\normal}\NR\PlaceMacro{tf}\PlaceMacro{normal}
      \NC Italic          \NC\type{\it}, \type{\italic}\NR\PlaceMacro{it}\PlaceMacro{italic}
      \NC Bold          \NC\type{\bf}, \type{\bold}\NR\PlaceMacro{bf}\PlaceMacro{bold}
      \NC Bold-italic  \NC\type{\bi}, \type{\bolditalic}, \type{\italicbold}\NR\PlaceMacro{bi}\PlaceMacro{bolditalic}\PlaceMacro{italicbold}
      \NC Slanted        \NC\type{\sl}, \type{\slanted}\NR\PlaceMacro{sl}\PlaceMacro{slanted}
      \NC Bold-slanted\NC\type{\bs}, \type{\boldslanted}, \type{\slantedbold}\NR\PlaceMacro{bs}\PlaceMacro{boldslanted}\PlaceMacro{slantedbold}
      \NC Small caps       \NC\type{\sc}, \type{\smallcaps}\NR\PlaceMacro{sc}\PlaceMacro{smalcaps}
      \NC Medieval         \NC\type{\os}, \type{\mediaeval}\PlaceMacro{os}\PlaceMacro{mediaeval}\NR
    \stoptabulate
  }
}

All these commands retain their effectiveness until another style or
alternative is explicitly enabled, or the {\em group} within which the
command is declared ends. Therefore, when we want the command to affect
only a part of the text, what we must do is to enclose that part within
a group, as in the following example, where each time the word {\em
thought} appears when it is a noun, not a verb, it is in italics,
creating a group for it.

\startDoubleExample

\starttyping
I thought a {\it thought} but 
the {\it thought} I thought wasn't
the {\it thought} I thought I thought.
If the {\it thought} I thought I thought
had been the {\it thought} I thought
I wouldn't have thought so much!
\stoptyping

I thought a {\it thought}, but 
the {\it thought} I thought, wasn't
the {\it thought} I thought I thought.
If the {\it thought} I thought I thought
had been the {\it thought} I thought
I wouldn't have thought so much!

\stopDoubleExample

\subsubsubject[sec:sufijos de tamaño]{Suffixes for changing alternative and size at the same time}
\PlaceMacro{rmx}\PlaceMacro{rmxx}\PlaceMacro{rma}\PlaceMacro{rmb}\PlaceMacro{rmc}\PlaceMacro{rmd}
\PlaceMacro{ssx}\PlaceMacro{ssxx}\PlaceMacro{ssa}\PlaceMacro{ssb}\PlaceMacro{ssc}\PlaceMacro{ssd}
\PlaceMacro{ttx}\PlaceMacro{ttxx}\PlaceMacro{tta}\PlaceMacro{ttb}\PlaceMacro{ttc}\PlaceMacro{ttd}
\PlaceMacro{tfx}\PlaceMacro{tfxx}\PlaceMacro{tfa}\PlaceMacro{tfb}\PlaceMacro{tfc}\PlaceMacro{tfd}
\PlaceMacro{itx}\PlaceMacro{itxx}\PlaceMacro{ita}\PlaceMacro{itb}\PlaceMacro{itc}\PlaceMacro{itd}
\PlaceMacro{bfx}\PlaceMacro{bfxx}\PlaceMacro{bfa}\PlaceMacro{bfb}\PlaceMacro{bfc}\PlaceMacro{bfd}
\PlaceMacro{bix}\PlaceMacro{bixx}\PlaceMacro{bia}\PlaceMacro{bib}\PlaceMacro{bic}\PlaceMacro{bid}
\PlaceMacro{slx}\PlaceMacro{slxx}\PlaceMacro{sla}\PlaceMacro{slb}\PlaceMacro{slc}\PlaceMacro{sld}
\PlaceMacro{bsx}\PlaceMacro{bsxx}\PlaceMacro{bsa}\PlaceMacro{bsb}\PlaceMacro{bsc}\PlaceMacro{bsd}

The commands that change style or alternative in their two-letter version (\tex{tf}, \tex{it}, \tex{bf}, etc.)  allow a range of {\em suffixes} that affect font size. The suffixes a, b, c and d increase the font size, multiplying it by $1.2$, $1.2^2$ ($=1.44$), $1.2^3$ ($=1.728$) or $1.2^4$ ($=2.42$) respectively. See an example:

\type{\tf test, \tfa test, \tfb test, \tfc test, \tfd test}

{\color[red]{\tf test, \tfa test, \tfb test, \tfc test, \tfd test}}

the suffixes x and xx reduce font size, multiplying it by 0.8 and 0.6
respectively:

\type{\tf test, \tfx test, \tfxx test}

{\color[red]{\tf test, \tfx test, \tfxx test}}

The suffixes \quote{x} and \quote{xx} applied to \tex{tf} allow us to
shorten the command, so that \tex{tfx} can be written as
\PlaceMacro{tx}\tex{tx} and \tex{tfxx} as \PlaceMacro{txx}\tex{txx}.

The availability of these different suffixes depends on the actual
implementation of the font. According to the \ConTeXt{} 2013 reference
manual (intended mostly for Mark~II) the only suffix guaranteed to
always work is \quote{x}, and the others might or might not be
implemented; or they might be just for some alternatives.

At any rate, to avoid doubts, we can use \tex{showbodyfont} that I spoke
of previously (in \in{section}[sec:see-font]). This command displays a
chart that not only allows us to appreciate the appearance of the font,
but also to see what the font looks like in each of its styles and
alternatives, as well as what resizing suffixes are available.

Let us look at the table showing \tex{showbodyfont} once more:

\showbodyfont[modern]

If we look closely at the table, we can see that the first column
contains the font styles (\tex{rm}, \tex{ss} and \tex{tt}). The first
row contains, on the left, the alternatives (\tex{tf}, \tex{sc},
\tex{sl}, \tex{it}, \tex{bf}, \tex{bs} and \tex{bi}), while the right
side of the first row contains the other available suffixes, although
only with the regular alternative.

It is important to note that a change in font size made by any of these
suffixes will only change the font size in the strict sense, leaving
intact other values normally associated with font size such as line
spacing.
  
\subsubsubject{Customising the scaling factor of the suffixes}
  
To customise the scaling factor we can use
\PlaceMacro{definebodyfontenvironment}\tex{definebodyfontenvironment}
whose format can be:

\starttyping
\definebodyfontenvironment[particular size][scaled]
\definebodyfontenvironment[default][scaled]
\stoptyping

In the first version we would redefine the scaling for a particular size
of the main font set by \tex{setupbodyfont} or by
\tex{switchtobodyfont}. For example:

\type{\definebodyfontenvironment[10pt][a=12pt,b=14pt,c=2, d=3]}

would ensure that when the main font is 10 points, suffix \quote{a}
would change it to 12 points, suffix \quote{b} to 14, suffix \quote{c}
would multiply the original font by 2 and suffix \quote{d} by 3. Note
that for a and b a fixed dimension has been indicated, but for c and d a
multiplication factor of the original size has been indicated.

But when the first argument of \tex{definebodyfontenvironment} is equal
to \MyKey{default}, then we will be redefining the scaling value for all
possible font sizes, and as a scaling value we can only enter a
multiplier number. So if, for example, we write:

\type{\definebodyfontenvironment[default][a=1.3,b=1.6,c=2.5,d=4]}

we will be indicating that whatever the size of the main font, the a
suffix should be multiplied by 1.3, the b by 1.6, the c by 2 and the d
by 4.

As well as the suffixes xx, x, a, b, c and d, with
\tex{definebodyfontenvironment} we can assign a scaling value to the
\MyKey{big}, \MyKey{small}, \MyKey{script} and \MyKey{scriptscript} key
words. These values are assigned to all sizes associated with these key
words in \tex{setupbodyfont} and \tex{switchtobodyfont}. They are also
applied in the following commands, whose usefulness can be deduced (I
think) from their name:

\startitemize[1,packed]

\item \PlaceMacro{smallbold}\tex{smallbold}
\item \PlaceMacro{smallslanted}\tex{smallslanted}
\item \PlaceMacro{smallboldslanted}\tex{smallboldslanted}
\item \PlaceMacro{smallslantedbold}\tex{smallslantedbold}
\item \PlaceMacro{smallbolditalic}\tex{smallbolditalic}
\item \PlaceMacro{smallitalicbold}\tex{smallitalicbold}
\item \PlaceMacro{smallbodyfont}\tex{smallbodyfont}
\item \PlaceMacro{bigbodyfont}\tex{bigbodyfont}
  
\stopitemize

If we want to see the default sizes of a particular font, we can use
\PlaceMacro{showbodyfontenvironment}\tex{showbodyfontenvironment[Font]}.
This command, applied to the {\tt modern} font, for example, gives the
following result:

\showbodyfontenvironment[modern]

\stopsubsection

\startsubsection
  [title={Defining commands and key words for font sizes, styles and alternatives}]

The predefined commands for changing font size, styles and variants are
enough. Furthermore, \ConTeXt\ allows us:

\startitemize[n]

\item To add our own command for changing font style, size or variant.

\item To add synonyms to style or variant names recognised by
  \tex{switchtobodyfont}.
  
\stopitemize

It provides the following commands to do this:

\startitemize

\item \PlaceMacro{definebodyfontswitch}\tex{definebodyfontswitch}:
allows us to define a command to change font size. For example, if we
want to define the \tex{eight} command (or the \tex{viii
command}\footnote{Remember that except for the case of control symbols,
\ConTeXt\ command names can only consist of letters.}) to set an 8 pt
font we need to write:

  {\tfx\type{\definebodyfontswitch[eight][8pt]}} or
  {\tfx\type{\definebodyfontswitch[viii][8pt]}}

\item \PlaceMacro{definefontstyle}\tex{definefontstyle}: allows us to
define one or more words that can be used in \tex{setupbodyfont} or
\tex{switchtobodyfont} to set a particular font style; so, for example,
if we wanted to call the {\em sans serif} something else (e.g. in
Spanish it is called \quotation{paloseco}) we can write

  \type{\definefontstyle[paloseco][ss]}

  A peculiarity of \tex{definefontstyle} is that it allows several words
  to be associated simultaneously with the same style, so, to continue
  the Spanish example:

  \type{\definefontstyle[paloseco, sosa, sinrebordes][ss]}

\item \PlaceMacro{definealternativestyle}\tex{definealternativestyle}:
allows us to associate a name with a font variant. This name could
function as a command or be recognised by the {\tt style} option of the
commands that allow us to configure the style to be applied. So, for
example, the following fragment

  \type{\definealternativestyle[strong][\bf][]}

  will enable the \tex{strong} command and the key word \MyKey{strong}
  that will be recognised by the {\tt style} option of the commands that
  allow this option. We could have said \quotation{bold} but this word
  is already in use for ConTeXt, so I have chosen a term used in HTML,
  namely, \quotation{strong} as an alternative

  \startSmallPrint

    I do not know what the third argument of
    \tex{definealternativestyle} does. It is not optional and therefore
    cannot be \Doubt omitted; but the only information I found on it is
    in the \ConTeXt\ reference manual where this third argument is said
    to be relevant only to chapter and section titles \quotation{{\em
    where, apart from \tex{cap}, we must obey the font used here}} (??)

  \stopSmallPrint

\stopitemize

\stopsubsection

\stopsection

\startsection
  [title=Other matters relating to the use of some alternatives]

Among the different alternatives of a font, there are two whose use
requires certain clarifications:

\startsubsection
  [
    reference=sec:emphasis,
    title={Italic, slanted and emphasis},
  ]

Both italics and slanted letters are used mainly for typographically
highlighting a fragment of the text to draw attention to it. In other
words, to {\em emphasise it}.

We can, of course, emphasise a text by explicitly enabling italic or
slanted. But \ConTeXt\ offers an alternative command that is much more
useful and interesting and is intended specifically for emphasising a
text fragment. This is the \PlaceMacro{em}\tex{em} command from the word
{\em emphasis}. By contrast to \tex{it} and \tex{sl}, that are purely
typographical commands, \tex{em} is a {\em conceptual} command; it works
differently, so is more versatile, to the point where the \ConTeXt{}
documentation recommends using \tex{em} in preference to \tex{it} or
\tex{sl}. When we use these two latter commands we are telling
\ConTeXt{} what font alternative we want to use; but when we use
\tex{em} we are telling it what effect we want produced, leaving it up
to \ConTeXt{} to decide how to do this.  Normally, to achieve the effect
of emphasising or highlighting something we would enable italic or
slanted, but this depends on the context. So if we use \tex{em} in a
text that is already in italic -- or is slanted -- the command will
highlight that in the opposite way -- in upright text in this case.

Hence the following example:

\startDoubleExample

\startlines
\starttyping

{\em One of the most beautiful 
orchids in the world is the 
{\em Thelymitra variegata} 
or Southern Queen of Sheba.}
\stoptyping
\stoplines


{\em One of the most beautiful orchids in the world is the {\em
 Thelymitra variegata} or Southern Queen of Sheba}.
 
\stopDoubleExample

Note that the first \tex{em} enables italics (actually, slanted, but see
below) and that the second \tex{em} disables this and instead puts the
words \quotation{Thelymitra variegata} in normal upright style.


Another advantage of \tex{em} is that it is not an alternative, so does
not disable the alternative we had before and so, for example, in a text
that is in bold, with \tex{em} we will get bold slanted without the need
to explicitly call on \tex{bs}. Similarly, if the \tex{bf} command
appears in a text that is emphasised already, this emphasis will not
cease.

By default \tex{em} enables slanted rather than italic, but we can
change this with \tex{setupbodyfontenvironment[default][em=italic]}.

\stopsubsection

\startsubsection
  [
    reference=sec:smallcaps,
    title=Small caps and fake small caps,
  ]

Small caps is a typographical resource that is often much better than
using upper case (capital) letters. Small caps give us the shape of the
capital letter but keep the height the same as lower case letters on the
line. This is why small caps is a stylistic variant of lower case. Small
caps replace capital letters in certain contexts, and are especially
useful for writing Roman numerals, or chapter titles. In academic texts
it is also customary to use small caps to write the names of the authors
cited.

The problem is that not all fonts implement small caps, and those that
do, do not always do so for some of their {\em font styles}. Moreover,
as small caps are an alternative to italic, bold or slanted, in
accordance with the general rules we have set out in this chapter, all
these typographical features could not be used simultaneously.

These problems can be resolved by using {\em fake small caps} that
\ConTeXt\ allows us to create with the \tex{cap} and \tex{Cap} commands;
in this regard see \in{section}[sec:Upper-Lower-Fake].

\stopsubsection

\stopsection

\startsection
  [title=Use and configuration of colours]

\ConTeXt\ provides commands for changing the colour of an entire
document, some of its elements, or certain parts of the text. It also
provides commands for uploading hundreds of predefined colours into
memory, and for seeing what their components are.

\startsubsection
  [title=Procedures for typesetting text fragments in colour]

Most of \ConTeXt's configurable commands allow an option called
\MyKey{color} that allows us to indicate the colour in which the text
affected by that command should be written. Thus, for example, to
indicate that chapter titles are written in blue, we only need to write:

\vbox{\starttyping
  \setuphead
    [chapter]
    [color=blue]
\stoptyping}

Using this procedure we can colour titles, headings, footnotes, margin
notes, bars and lines, tables, table or image titles, etc. The advantage
of using this procedure is that the final result will be consistent (all
texts that fulfil the same function will be written with the same
colour) and easier to change globally. 

We can also colour a portion or fragment of text directly, although, to
avoid a too-variegated use of colours, which is not pleasant from a
typographical perspective, or an inconsistent use, in general it is
recommended to avoid direct colouring and to use what we could call {\em
semantic colouring}, that is, instead of, for example, writing

\type{\color[red]{Very important text}}

we define a command for very important text that is given a colour. For
example

\starttyping
\definehighlight[important][color=red]
\important{Very important text}
\stoptyping

\stopsubsection

\startsubsection
  [title=Changing the document's background and foreground colour]
\PlaceMacro{setupbackgrounds}\PlaceMacro{setupcolors}

If we want to change the colour of the whole document, depending on
whether we want to alter the colour of the background or the colour of
the foreground (text), we will use \tex{setupbackgrounds} or
\tex{setupcolors}. So, for example

\starttyping
\setupbackgrounds
  [page]
  [background=color,backgroundcolor=blue]
\stoptyping

This command will set the background colour of pages as blue. As a value
for \MyKey{backgroundcolor} we can use the name of any of the predefined
colours.

To globally change the foreground colour throughout the document (from
the point where the command is inserted) use \tex{setupcolors}, where
the \MyKey{textcolor} option controls the text colour. For example:

\type{\setupcolors[textcolor=red]}

will see that the text colour is red.

\stopsubsection

\startsubsection
  [title=Commands for colouring particular text\\ fragments]
\PlaceMacro{color}\PlaceMacro{colored}

The general command for colouring small portions of text is

\type{\color[ColourName]{Text to colour}}

For larger portions of text it is preferable to use

\type{\startcolor[ColourName] ... \stopcolor}

Both are named after some predefined colour. If we want to define the
colour on the fly, we can use the \tex{colored} command. For example:

\startDoubleExample

\starttyping
Three \colored[r=0.1, g=0.8, b=0.8]
{coloured} cats    
\stoptyping

Three \colored[r=0.1, g=0.8, b=0.8]{coloured} cats.
  
\stopDoubleExample

\stopsubsection

\startsubsection
  [
    reference=sec:predefined-colours,
    title=Predefined colours,
  ]
  % This information comes from the reference manual. But I
  % suspect there are considerably more predefined colours. For
  % example the "maincolor" used in this document is based on
  % the orange not defined in the list of predefined colours.

  \ConTeXt\ loads the most common predefined colours listed in
  \in{table}[tbl:predefined colours].\footnote{This list can be found in the reference manual and \ConTeXt\ wiki but I am fairly sure it is an incomplete list since in this document, for example, without having loaded any additional colour, we use \quotation{orange} -- which is not in the \in{table}[tbl:predefined colours]-- for section titles.}

{\switchtobodyfont[small]
\placetable
  [here]
  [tbl:predefined colours]
  {\ConTeXt's predefined colours}
{\starttabulate[|l|l|l|l|]
\HL
\NC{\bf Name}
\NC{\bf Light tone}
\NC{\bf Medium tone}
\NC{\bf Dark tone}
\NR
\HL
\NC black
\NR
\NC white
\NR
\NC gray
\NC lightgray
\NC middlegray
\NC darkgray
\NR
\NC red
\NC lightred
\NC middlered
\NC darkred
\NR
\NC green
\NC lightgreen
\NC middlegreen
\NC darkgreen
\NR
\NC blue
\NC lightblue
\NC middleblue
\NC darkblue
\NR
\NC cyan
\NC\NC middlecyan
\NC darkcyan
\NR
\NC magenta
\NC\NC middlemagenta
\NC darmagenta
\NR
\NC yellow
\NC\NC middleyellow
\NC darkyellow
\NR
\HL
\stoptabulate
}}

There are other colour collections not loaded by default but which can
be loaded with the command

\PlaceMacro{usecolors}\type{\usecolors[CollectionName]}

where CollectionName can be 

\startitemize[packed]
\item \MyKey{crayola}, 235 colours imitating marker shades.
\item \MyKey{dem}, 91 colours.
\item \MyKey{ema}, 540 colour definitions based on colours used by Emacs.
\item \MyKey{rainbow}, 91 colours for use in maths formulas.
\item \MyKey{ral}, 213 colour definitions from the {\em Deutsches
  Institut für Gütesicherung und Kennzeichnung} (German Institute for Quality Assurance and Labelling).
\item \MyKey{rgb}, 223 colours.
\item \MyKey{solarized}, 16 colours based on the solarized scheme.
\item \MyKey{svg}, 147 colours.
\item \MyKey{x11}, 450 standard colours for X11.
\item \MyKey{xwi}, 124 colours.
\stopitemize

\startSmallPrint

  The colour definition files are included in the
  \MyKey{context/base/mkiv} directory of the distribution and its name
  responds to the \MyKey{colo-imp-NOMBRE.mkiv} scheme. The information I
  have just provided on the different collections of predefined colours
  is based on my particular distribution. The specific collections, or
  the number of colours defined in them, could change in future
  versions.

\stopSmallPrint

To see what colours each of these collections contains we can use the
\PlaceMacro{showcolor}\tex{showcolor[CollectionName]} command described
in what follows. To use some of these colours we first need to load them
into memory with the (\tex{usecolors[CollectionName]}) command and then
we have to tell the \tex{color} or
\PlaceMacro{startcolor}\tex{startcolor} commands the name of the colour.
For example the following sequence: \page[preference]

\starttyping
\usecolors[xwi]
\color[darkgoldenrod]{Tweedledum and Tweedledee}
\stoptyping
\page[no]

will write
\usecolors[xwi]\color[darkgoldenrod]{Tweedledum and Tweedledee}
\page[preference]

\stopsubsection

\startsubsection
  [title=To see available colours]
\PlaceMacro{showcolor}

The \tex{showcolor} command shows a list of colours in which you can see
the appearance of the colour, its appearance when the colour is used in
grey scale, the red, green and blue components of the colour, and the
name by which \ConTeXt\ knows it. Used without any argument
\tex{showcolor} will show the colours used in the current document. But
as an argument we can indicate any of the predefined collections of
colours that were discussed in \in{section}[sec:predefined-colours], and
so, for example, \tex{showcolor[solarized]} will show us the 16
solarized colours in that collection:

\showcolor[solarized]

If we want to see the rgb components of a particular colour, we can use
\PlaceMacro{showcolorcomponents}\tex{showcolorcomponents[ColourName]}.
This is useful if we are trying to define a specific colour, to see the
composition of some colour that is close to it. For example,
\tex{showcolorcomponents[darkgoldenrod]} will show us:

\startframedtext[width=\textwidth]\switchtobodyfont[small]
\showcolorcomponents[darkgoldenrod]
\stopframedtext

\stopsubsection

\startsubsection
  [title=Defining our own colours]
\PlaceMacro{definecolor}

\tex{definecolor} allows us to either clone an existing colour or define
a new colour. Cloning an existing colour is as simple as creating an
alternative name for it. To do this you would have to write:

\type{\definecolor[New colour][Old colour]}

This will ensure that “{\em New colour}” is exactly the same colour as
“{\em Old colour}”.

But the main use of \tex{definecolor} is for creating new colours. To do
so the command must be used in the following way:

\type{\definecolor[ColourName][Definition]}

where {\em Definition} can be done by applying up to six different
colour generation schemes:

\startitemize

\item {\bf RGB colours}: The definition of RGB colours is one of the
most widespread; it is based on the idea that it is possible to
represent a colour by mixing, by addition, the three primary colours:
red (\quote{r} for {\em red}), green (\quote{g} for {\em green}) and
blue (\quote{b} for {\em blue}). Each of these components is indicated
as a decimal number between 0 and 1.

  \type{\definecolor[lime 1][r=0.75, g=1, b=0]}: \definecolor[lime 1]
       [r=0.75, g=1, b=0] \color[lime 1]{Text in “lime 1”}.

\item {\bf Hex colours}: This way of representing the colours is also
based on the RGB scheme, but the red, green and blue components are
indicated as a three-byte hexadecimal number in which the first byte
represents the value of red, the second the value of green and the third
the value of blue. For example:

  \type{\definecolor[lime 2][x=BFFF00]}: \definecolor[lime 2][x=BFFF00]
  \color[lime 2]{Text in “lime 2”}.

\item {\bf CMYK colours}: This model of colour generation is what is
called a \quotation{subtractive model} and is based on the mixture of
pigments of the following colours: cyan (\quote{c}), magenta
(\quote{m}), yellow (\quote{y}, from {\em yellow}) and black (\quote{k},
from {\em key}). Each of these components is indicated as a decimal
number between 0 and 1:

  \type{\definecolor[lime 3][c=0.25, m=0, y=1, k=0]}:
  \definecolor[lime 3][c=0.25, m=0, y=1, k=0] \color[lime 3]{Text in
   “lime 3”}.

\item {\bf HSL/HSV}: This colour model is based on measuring the hue
(\quote{h}, from {\em hue}), saturation (\quote{s}) and luminescence
(\quote{l} or sometimes \quote{v}, from {\em value}). Hue corresponds to
a number between 0 and 360; saturation and luminescence must be a
decimal number between 0 and 1. For example

  \type{\definecolor[lime 4][h=75, s=1, v=1]}: \definecolor[lime
    4][h=75, s=1, v=1] \color[lime 4]{Text in “lime 4”}

\item {\bf HWB colours}: The HWB model is a suggested standard for CSS4
which measures the hue (\quote{h}, from {\em hue}), and the level of
white (\quote{w}, from {\em whiteness}) and black (\quote{b}, from {\em
blackness}). Hue corresponds to a number between 0 and 360, while
whiteness and blackness are represented by a decimal number between 0
and 1.

  \type{\definecolor[Azure][h=75, w=0.2, b=0.7]}
  \definecolor[Azure][h=75, w=0.2, b=0.7]\color[Azure]{Text in
   “Azure”}.

  % \type{\definecolor[lima 5][h=75, w=0, b=0]}
  % \definecolor[lima 5][h=75, w=0.2, b=0.7]\color[lima 5]{Texto en
  %   color “lima 5”}.

\item {\bf Greyscale}: based on a component called (\quote{s}, from {\em scale}) that measures the amount of grey. It needs to be a number between 0 and 1. For example:

  \type{\definecolor[light grey][s=0.65]}: \definecolor[light grey][s=0.65] \color[light grey]{Text in “light grey”}.
  
\stopitemize

It is also possible to define a new colour from another colour. For
example, the colour in which titles are written in this introduction is
defined as

\type{\definecolor[maincolour][0.6(orange)]}

\stopsubsection

\stopsection

\stopchapter

\stopcomponent


%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% coding: utf-8-unix
%%% TeX-master: "../introCTX.mkiv"
%%% End:
%%% vim:set filetype=context tw=72 : %%%
