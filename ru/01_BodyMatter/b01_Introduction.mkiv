%%% File:        b01_Introduction.mkiv
%%% Author:      Joaquín Ataz-López
%%% Begun:       March 2020
%%% Concluded:   March 2020
%%% Contents:    First chapter of the introduction to ConTeXt: a general
%%%              overview of the system. The contents were partly
%%%              by the presentation of LaTeX
%%%              by Kopka and Daly in Chapter 1 of their Guide to
%%%              LaTeX
%%%
%%% Edited with: Emacs + AuTeX - And at times with vim + context-plugin
%%%

\environment ../introCTX_env.mkiv

\startcomponent b01_Introduction.mkiv

\startchapter
  [
    title=\ConTeXt:  общий обзор,
    reference=cap:panorama
  ]

\TocChap

\startsection
  [title=Что же тогда такое \ConTeXt?]

\ConTeXt\ -- это {\em система набора текста}, или, другими словами: обширный набор инструментов, направленных на предоставление пользователю абсолютного и полного контроля над внешним видом и представлением конкретного электронного документа, предназначенного для печати на бумаге или для отображения на экране. В этой главе объясняется, что это означает. Но сначала выделим некоторые характеристики \ConTeXt.

\startitemize

  \item Существует две разновидности \ConTeXt\, известные как Mark~II и Mark~IV соответственно. \ConTeXt\ Mark~II заморожен, т.е. считается уже полностью разработанным языком, не предназначенным для дополнительных изменений или добавления новых вещей. Новая версия появится только в том случае, если нужно исправить какую-то ошибку. \ConTeXt\ Mark~IV, с другой стороны, продолжает развиваться, поэтому время от времени появляются новые версии, которые вносят некоторые улучшения или дополнительные полезности. Но, хотя он все еще находится в разработке, это очень зрелый язык, в котором изменения, внесенные в новые версии, довольно незначительны и влияют исключительно на низкоуровневую работу системы. Для обычного пользователя эти изменения полностью прозрачны; как будто их не было. Хотя у обоих вкусов много общего, между ними есть и несовместимые черты. Следовательно, это введение посвящено только \ConTeXt\ Mark~IV.

  \item \ConTeXt\ -- это {\em libre} программное обеспечение (или бесплатное программное обеспечение, но не только в смысле бесплатного). Собственно программа (то есть комплекс компьютерных инструментов, составляющих \Context) распространяется под лицензией {\em GNU General Public Licence}. Документация предлагается по лицензии  \quotation{{\em Creative Commons}}, которая позволяет ее свободно копировать и распространять.

  \item \ConTeXt\ не является ни программой текстового процессора, ни программой редактирования текста, а набором инструментов, направленных на  {\em преобразование} текста, который мы ранее написали в нашем любимом текстовом редакторе. Поэтому, когда мы работаем с  \ConTeXt:

  \startitemize

    \item Мы начинаем с написания одного или нескольких текстовых файлов с помощью любого текстового редактора.

    \item В этих файлах, наряду с текстом, составляющим содержимое документа, есть ряд инструкций, которые сообщают \ConTeXt\ о внешнем виде, который должен иметь окончательный документ, созданный из исходных текстовых файлов. Полный набор инструкций \ConTeXt, по сути, является {\em языком}; и поскольку этот язык позволяет программировать типографское преобразование текста, мы можем сказать, что \ConTeXt\ -- {\em это типографский язык программирования}.

    \item После того, как мы напишем исходные файлы, они будут обработаны программой (также называемой  \MyKey{context}\footnote{\ConTeXt\ -- это одновременно и язык, и программа (помимо прочего). Этот факт в тексте, подобном текущему, создает проблему, из-за которой иногда нам приходится различать эти два аспекта. Вот почему я принял типографское соглашение о написании  \quotation{ConTeXt} с его логотипом (\ConTeXt), когда я хочу сослаться исключительно на язык или и на язык, и на программу. Однако, когда я хочу обратиться исключительно к программе, я буду писать \MyKey{context} строчными буквами и моноширинным шрифтом, типичным для компьютерных терминалов и пишущих машинок. Я также буду использовать этот тип для примеров и упоминаний команд, принадлежащих этому языку.}), которая сгенерирует из них PDF-файл, готовый для отправки в типографию или для отображения на экране.

  \stopitemize

  \item Следовательно, в \ConTeXt\ мы должны различать документ, который мы пишем, и документ, который создает \ConTeXt. Чтобы избежать каких-либо сомнений, в этом введении я назову текстовый документ, содержащий инструкции по форматированию, исходным файлом, а документ PDF, созданный \ConTeXt\ из исходного файла, я назову {\em окончательным документом}.

\stopitemize

Вышеупомянутые основные положения будут развиваться ниже.

\stopsection

\startsection [title=Верстка текстов]

Написание документа (книги, статьи, главы, буклета, распечатки, бумаги ...) и его типографское оформление - это два совершенно разных вида деятельности. Написание документа во многом похоже на его составление; это делает автор, который определяет его содержание и структуру. Документ, созданный непосредственно автором в том виде, в каком он его написал, называется {\em рукописью}. По самой своей природе доступ к рукописи имеет только автор или лица, которым разрешено читать ее. Его распространение за пределами этой интимной группы требует, чтобы рукопись была {\em опубликована}. Сегодня опубликовать что-либо - в этимологическом смысле сделать это «общедоступным» - так же просто, как разместить это в Интернете, доступном для всех, кто найдет это и хочет, чтобы это прочитал. Но до относительно недавнего времени публикация была дорогостоящим процессом, зависящим от определенных специалистов, специализирующихся в ней, доступ к которым осуществлялся только теми рукописями, которые из-за своего содержания или из-за их автора считались особенно интересными. И даже сегодня мы стремимся зарезервировать слово {\em публикация} для такого рода {\em  профессиональных публикаций}, в которых рукопись претерпевает ряд изменений внешнего вида, направленных на улучшение читаемости документа. Эту серию преобразований мы называем {\em версткой}.

Целью набора является - вообще говоря, не считая рекламных текстов, которые стремятся привлечь внимание читателя - создать документы с максимальной разборчивостью, что означает качество печатного текста, которое способствует или облегчает его чтение и гарантирует, что читатель чувствует себя комфортно. с этим. Этому способствуют многие вещи; некоторые, конечно, связаны с содержимым документа: (качество, ясность, организация ...), но другие зависят от таких вещей, как тип и размеры используемого шрифта, использование пробелов в документе, визуальное разделение между абзацами и т. д. Кроме того, существуют и другие виды ресурсов, не столько графического или визуального характера, как наличие или иное в документе определенных вспомогательных средств для читателя, таких как верхние и нижние колонтитулы страниц, указатели, глоссарии, использование полужирного шрифта, заголовков на полях и т. д. Знание и правильное обращение со всеми ресурсами, доступными наборщику, можно назвать «искусством набора» или «искусством печати».

Исторически до появления компьютера задачи и роли писателя и наборщика оставались совершенно разными. Автор писал от руки или на машине XIX века, называемой пишущей машинкой, типографские возможности которой были даже более ограниченными, чем у тех, кто писал от руки; а затем автор передал оригиналы издателю или типографии, которые преобразовали их, чтобы получить печатный документ.

Сегодня информатика облегчила автору выбор композиции до мельчайших деталей. Однако это не отменяет того факта, что качества, которые нужны хорошему автору, не такие, как те, которые нужны хорошему наборщику. В зависимости от типа документа, с которым имеет дело, автору необходимо понимание предмета, о котором идет речь, ясность изложения, хорошо структурированное мышление, позволяющее создать хорошо организованный текст, творческий подход, чувство ритма и т. Д. и т.д. Но наборщик должен сочетать хорошее знание концептуальных и графических ресурсов, имеющихся в его или ее распоряжении, и достаточно хороший вкус, чтобы иметь возможность использовать их гармонично.

С помощью хорошей программы обработки текста \footnote{Согласно довольно старому соглашению, мы делаем различие между  {\em текстовыми редакторами} и  {\em текстовыми процессорами}. Первые типы программ редактирования текста работали с неформатированными текстовыми файлами, тогда как другие типы программ работали с двоичными файлами форматированного текста.} можно получить достаточно хороший типографически подготовленный документ. Но текстовые процессоры, вообще говоря, не предназначены для набора текста, и результаты, хотя они могут быть правильными, несопоставимы с результатами, получаемыми с помощью других инструментов, специально разработанных для управления композицией документа. Фактически, текстовые процессоры - это то, как развивались пишущие машинки, и их использование, поскольку эти инструменты маскируют разницу между авторством текста и его набором, имеет тенденцию создавать неструктурированные и типографически неадекватные тексты. Напротив, такие инструменты, как \ConTeXt, произошли от печатного станка; они предлагают гораздо больше возможностей для компоновки, и, прежде всего, невозможно научиться их использовать, не усвоив попутно множество понятий, касающихся набора текста. В этом отличие от текстовых процессоров, которые можно использовать в течение многих лет, не изучая ничего про типографию.

\stopsection

\startsection [title=Языки разметки]

Во времена, когда еще не было компьютеров, как я уже говорил, автор готовил рукопись от руки или на пишущей машинке и передавал ее издателю или типографу, который отвечал за преобразование рукописи в окончательный печатный текст. Хотя автор относительно мало участвовал в преобразовании, он или она поддержали некоторое вмешательство, указав, например, что определенные строки рукописи были названиями ее различных частей (глав, разделов ...), или указав что определенные вещи должны быть каким-то образом выделены типографским шрифтом. Эти указания были сделаны автором в самой рукописи, иногда прямо, а иногда через определенные соглашения, которые продолжали развиваться с течением времени. Например, главы всегда начинались на новой странице с вставки нескольких пустых строк перед заголовком, подчеркивания его, написания заглавными буквами или выделения текста в рамку между двумя подчеркиваниями, увеличения отступа абзаца и т.д.

Короче говоря, автор {\em разметил} текст, чтобы указать, как его следует набирать. Затем, позже, редактор вручную напишет другие обозначения текста для принтера, такие как, например, используемый шрифт и его размер.

Сегодня, в компьютеризованном мире, мы можем продолжать делать это для создания электронных документов с помощью так называемого  {\em языка разметки}. Эти типы языков используют серию  {\em меток} или указаний на то, что программа, обрабатывающая файл, содержащий их, знает, как интерпретировать. Вероятно, самый известный язык разметки сегодня- - это HTML, поскольку сегодня на нем основано большинство веб-страниц. HTML-страница содержит текст веб-страницы вместе с рядом меток, которые сообщают программе браузера, загружающей страницу, как она должна отображаться. Разметка HTML, которую понимают веб-браузеры, вместе с инструкциями о том, как и где их использовать, называется \quotation{язык HTML}, который является {\em языком разметки}. Но помимо HTML существует множество других языков разметки; на самом деле они быстро развиваются, и поэтому XML, который является {\em преимущественно} языком разметки, сегодня можно найти повсюду и используется практически во всем: для проектирования баз данных, для создания конкретных языков, передачи структурированных данных, файлов конфигурации приложений. и т. д. Существуют также языки разметки, предназначенные для графического дизайна (SVG, TikZ или MetaPost), математических формул (MathML), музыки (Lilypond и MusicXML), финансов, геоматики и т. д. И, конечно же, есть также языки разметки, предназначенные для типографское преобразование текста, и среди них выделяются  \TeX\ и его производные.

Что касается {\em типографской разметки}, которая указывает, как должен выглядеть текст, есть два вида, к которым мы можем относиться:  {\em чисто типографская разметка} и  {\em концептуальная разметка} или, если хотите, {\em логическая разметка}. Чисто типографская разметка ограничивается точным указанием того, какой типографский ресурс следует использовать для отображения определенного текста; например, когда мы указываем, что определенный текст должен быть выделен жирным шрифтом или курсивом. С другой стороны, концептуальная разметка указывает, какая функция соответствует определенному тексту в документе в целом, например, когда мы указываем, что что-то является заголовком, подзаголовком или цитатой. В общем, документы, которые предпочитают использовать этот второй вид разметки, более последовательны и их легче составлять, поскольку они еще раз указывают на разницу между авторством и составом: автор указывает, что такая-то строка является заголовком, или что такая-то и такой фрагмент является предупреждением или цитатой; и наборщик решает, как типографически выделить все заголовки, предупреждения или цитаты; таким образом, с одной стороны, гарантируется согласованность, поскольку все фрагменты, выполняющие одну и ту же функцию, будут выглядеть одинаково, а с другой стороны, это экономит время, потому что формат каждого типа фрагмента нужно указывать только один раз.

\stopsection

\startsection [title=\TeX\  и его производные]

\TeX\ был разработан в конце 70-х годов Дональдом Э. Кнутом, профессором (ныне заслуженным профессором) теоретического компьютерного программирования в Стэнфордском университете, который реализовал программу для выпуска своих собственных публикаций и в качестве примера систематически разработанной и аннотированной программы. Наряду с \TeX, {\sc Knuth} разработал дополнительный язык программирования под названием  \MetaFont, созданный для разработки типографских шрифтов, и он использовал его для разработки шрифта, который он назвал {\em Computer Modern}, который, наряду с обычными символами любого шрифта, также включал полный набор «Глифов» \footnote{В типографике глиф - это графическое представление символа, количества символов или части символа, и сегодня он является эквивалентом буквенного типа (бит, на котором выгравирована буква или подвижный шрифт).}, предназначенные для написания математики. Ко всему этому он добавил несколько дополнительных утилит, и таким образом родилась система набора текста под названием \TeX, которая благодаря своей мощности, качеству результатов, гибкости использования и широким возможностям считается одной из лучших компьютеризированных систем для создания текста. Он был разработан для текстов, в которых много математики, но вскоре стало ясно, что возможности системы сделали его пригодным для всех типов текстов.

\reference[ref:boxes]{}Внутренне \TeX\ работает так же, как бывшие наборщики в типографии. Для \TeX\ все является {\em боксом}: буквы содержатся в прямоугольниках, пробелы также являются прямоугольниками, несколько букв (прямоугольники, содержащие несколько букв) образуют новый прямоугольник, в котором заключено слово, а несколько слов вместе с пустым пространством между ними. они образуют рамку, содержащую строку, несколько строк становятся рамкой, содержащей абзац ... и так далее. Все это, кроме того, с необычайной точностью проведения измерений. Учтите, что наименьшая единица, с которой имеет дело \TeX, в 65,536 раз меньше типографской точки, с которой измеряются символы и строки, что обычно является наименьшей единицей, обрабатываемой большинством программ обработки текстов. Это означает, что самая маленькая единица измерения, обрабатываемая \TeX, составляет примерно 0,000005356 миллиметра.


% I copy-pasted the accented epsilon from "Aprender ConTeXt",
% by Pablo Rodríguez, however for whatever reason it would not process.
% Therefore I have used \definecharacter to create an accented epsilon

\definecharacter etilde {\buildtextaccent ´ {\lower.2ex\hbox{\epsilon}}}

Название \TeX\ происходит от корня греческого слова \tau\etilde\chi\nu\eta, написанного заглавными буквами  ({\tfx ΤÉΧΝΗ}). Следовательно, последняя буква слова \TeX\ -- это не латинское \quote{X}, а греческое \quote{\chi}, произносимое - по-видимому - как шотландское «ch» в слове  {\em loch}. Поэтому \TeX\ следует произносить как Tech. С другой стороны, это греческое слово означало как «искусство», так и «технологию», и именно по этой причине Кнут выбрал его для названия своей системы. Он писал, что цель этого названия -- \quotation{напомнить вам, что \TeX\ в первую очередь занимается высококачественными техническими рукописями. Его акцент делается на искусство и технологии, как в основном греческом слове}.

Используя соглашение, установленное {\sc Knuth}, следует записать, \TeX:

\startitemize

  \item  В типографически отформатированных текстах, подобных этому, с использованием логотипа, который я использовал до сих пор: три буквы в верхнем регистре, при этом центральная буква \quote{E} слегка смещена ниже, чтобы облегчить более точное выравнивание между буквами \quote{T} и \quote{X}; или другими словами: \quotation{\TeX}.

  \startSmallPrint

Чтобы облегчить написание этого логотипа, {\sc Knuth} включил в \TeX\ инструкцию по его написанию в окончательный документ: \PlaceMacro{TeX}\tex{TeX}.


  \stopSmallPrint

  \item В неформатированном тексте (например, в электронном письме или текстовом файле) буквы \quote{T} и \quote{X} в верхнем регистре, а центральная \quote{e} - - в нижнем регистре; итак:  \quotation{TeX}.

\stopitemize

Это соглашение по-прежнему используется во всех производных от \TeX, которые включают его собственное имя, как в случае с \ConTeXt. При написании в текстовом режиме нам нужно написать \quotation{ConTeXt}.

\startsubsection
  [
    reference=sec:engines,
    title=Движки \TeX
  ]

Программа \TeX\ -- это бесплатное программное обеспечение {\em libre}: ее исходный код доступен для всех, и любой может использовать или изменять его по своему усмотрению, с единственным условием, что в случае внесения изменений результат не может быть назван \quotation{\TeX}. Вот почему со временем появились определенные модификации программы, в которые были внесены различные улучшения, которые обычно называются {\em \TeX\ Engines}. Помимо исходной программы \TeX, основными механизмами являются, в хронологическом порядке появления, \pdfTeX, \eTeX, \XeTeX\ и \LuaTeX. Каждый из них должен включать улучшения предыдущего. С другой стороны, эти улучшения, вплоть до появления \LuaTeX, не влияли на сам язык, а только на входные файлы, выходные файлы, обработку источников и работу макросов на низком уровне.

\startSmallPrint

Вопрос о том, какой движок \TeX\ использовать, является очень обсуждаемым во вселенной \TeX. Я не буду здесь развивать этот вопрос, поскольку \ConTeXt\ Mark~IV работает только с LuaTeX. На самом деле в мире \ConTeXt\ обсуждение \TeX\ {\em Engines} превращается в обсуждение того, использовать ли Mark~II (который работает с PdfTeX и XeTeX) или Mark~IV (который работает только с LuaTeX).

\stopSmallPrint

\stopsubsection

\startsubsection
  [
    title={Форматы, выведенные из \TeX}
  ]

Ядро или сердце \TeX\ понимает только набор из примерно 300 очень простых инструкций, называемых {\em примитивами}, которые подходят для операций набора и программирования функций. Подавляющее большинство этих инструкций очень {\em низкого уровня}, что в компьютерной терминологии означает, что они легче понимаются компьютером, чем человеком, поскольку они касаются очень элементарных операций \quotation{shift этот символ 0,000725 миллиметров вверх} вид. Таким образом, {\sc Knuth} увидел, что \TeX\ будет расширяемым, а это означает, что должен существовать механизм, позволяющий определять инструкции на более высоком уровне, более понятном для людей. Эти инструкции, которые во время выполнения разбиваются на другие более простые инструкции, называются {\em макросами}. Например, инструкция \TeX, печатающая логотип (\tex{TeX}), во время выполнения разбивается следующим образом:

\vbox{\starttyping
T
\kern -.1667em
\lower .5ex
\hbox {E}
\kern -.125em
X
stoptyping}

Но человеку гораздо легче понять и запомнить, что простая команда \quotation{\PlaceMacro{TeX}\type{\TeX}} выполняет типографские операции, необходимые для печати логотипа.

\startSmallPrint

Разница между {\em макросом} и {\em примитивом} имеет значение только с точки зрения разработчика \TeX. С точки зрения пользователя это инструкции или, если хотите, {\em команды}. Кнут назвал их  {\em контрольными последовательностями}.

\stopSmallPrint

Возможность расширения языка с помощью {\em макросов} - одна из характеристик, превративших \TeX\ в такой мощный инструмент. Фактически, сам {\sc Knuth} создал около 600 макросов, которые вместе с 300 примитивами составляют формат под названием \quotation{Plain\TeX}. Очень часто путают так называемый \TeX\ с Plain\TeX\, и, фактически, почти все, что обычно пишут или говорят о \TeX, на самом деле является отсылкой к Plain \ TeX. Книги, которые утверждают, что посвящены \TeX\ (включая основную \quotation{{\em The\TeX Book}}), действительно относятся к Plain\TeX; а те, кто считает, что работают напрямую с \TeX\, на самом деле работают с Plain\TeX.



Normally these {\em formats} are accompanied by a programme that loads the macros that make them up into memory before calling on \MyKey{tex} (or the actual engine being used for processing) to process the source file. But even though all these formats are actually running \TeX, as each of them has different instructions and different syntax rules from the user's point of view, we can think of them as {\em different languages}. They all draw their inspiration from \TeX, but are different
from \TeX\ and also different from each other.

\stopsection

\startsection [title=\ConTeXt, reference=sec:ctx]

На самом деле \ConTeXt, который начинался как {\em формат} \TeX, сегодня намного больше. \ConTeXt\ включает:

\startitemize[n]

  \item Очень широкий набор макросов \TeX. Если в Plain\TeX\ около 900 инструкций, то в \ConTeXt\ около 3500; и если мы сложим названия различных опций, поддерживаемых этими командами, мы получим словарь из около 4000 слов. Словарь так велик из-за стратегии \ConTeXt, облегчающей его изучение, и эта стратегия означает включение любого количества синонимов для команд и опций.

  \startSmallPrint

Намерение состоит в том, что если должен быть достигнут определенный эффект, то для каждого из способов, которыми носитель английского языка назвал бы этот эффект, есть команда или опция, которая его достигает, что должно облегчить использование языка. Например, чтобы одновременно получить жирное и курсивное письмо, в \ConTeXt\ есть три инструкции, каждая из которых дает один и тот же результат: \type{\bi}, \type{\italicbold} и \type{\bolditalic}.

  \stopSmallPrint

  \item Аналогичным образом широкий набор макросов для \MetaPost, графического языка программирования, производного от \MetaFont, который, в свою очередь, представляет собой язык для дизайна шрифтов, разработанный {\sc Knuth} совместно с \TeX.

  \item Такой же широкий набор макросов для MetaPost, графического языка программирования, полученного из METAFONT, который, в свою очередь, является языком для дизайна шрифтов, который Кнут разработал совместно с \TEX.

  \item  Различные {\em скрипты}, разработанные на {\sc Perl} (самый старый), {\sc Ruby} (некоторые также старые, другие не такие старые) и {\sc Lua} (самые свежие).

  \item Интерфейс, который объединяет \TeX, \MetaPost, {\sc Lua} и XML, позволяя писать и обрабатывать документы на любом из этих языков или смешивать элементы из некоторых из них.

\stopitemize

\startSmallPrint

Возможно, вы не поняли многого из предыдущего объяснения? Не беспокойся об этом. Я использовал в нем много компьютерного жаргона и упомянул множество программ и языков. Для использования \ConTeXt\ не обязательно знать все эти различные компоненты. На данном этапе обучения важно придерживаться идеи о том, что \ConTeXt\ объединяет множество инструментов из разных источников, которые вместе составляют систему набора текста.

 \stopSmallPrint

Именно из-за этой последней особенности интеграции инструментов различного происхождения мы говорим, что \ConTeXt\ -- это  \quotation{гибридная технология}, предназначенная для верстки документов. Я понимаю, что это превращает  \ConTeXt\ в чрезвычайно продвинутую и мощную систему.

Несмотря на то, что \ConTeXt\ -- это гораздо больше, чем набор макросов для \TeX, он по-прежнему основан на \TeX, и именно поэтому этот документ, который я называю не более, чем  {\em введением}, фокусируется на этом.

\ConTeXt, с другой стороны, гораздо более современен, чем \TeX. Когда был создан \TeX, появление компьютеров было только в начале, и мы были далеки от того, чтобы увидеть, каким будет (станет) Интернет и мультимедийный мир. В этом отношении  \ConTeXt\ естественным образом объединяет некоторые вещи, которые всегда были чем-то вроде инородного тела в \TeX, такие как включение внешней графики, обработка цвета, гиперссылки в электронных документах, предположение о размере бумаги, подходящем для документа, предназначенного для отображения на экране, и т.д.

\stopsubsection

\startsubsection
  [
    reference=sec:historyctx,
    title=Краткая история \ConTeXt
  ]

\ConTeXt{} родился примерно в 1991 году. Он был создан  {\sc Hans Hagen} и {\sc Ton Otten} в голландской компании по разработке и обработке документов под названием \quotation{{\em Pragma Advanced Document Engineering}}, обычно сокращенно Pragma ADE. Он начинался с того, что представлял собой набор макросов \TeX\ с голландскими именами и неофициально известный как {\em Pragmatex}, предназначенный для нетехнических сотрудников компании, которым приходилось управлять многими деталями редактирования наборных документов и которые не привыкли к использованию языков разметки или интерфейсов,  кроме голландского. Следовательно, первая версия \ConTeXt{} была написана на голландском языке. Идея заключалась в том, чтобы создать достаточное количество макросов с единообразным и согласованным интерфейсом. Примерно в 1994 году {\em пакет} был достаточно стабильным, чтобы руководство пользователя было написано на голландском языке, а в 1996 году по инициативе {\sc Hans Hagen} ссылка на него стала называться \quotation{\ConTeXt{}}. Это имя претендует на то, чтобы означать \quotation{Text with \TeX} (используя латинский предлог «con», означающий «с»), но в то же время это игра слов на английском (и голландском) слове « \Context». Таким образом, за названием скрывается тройная игра слов, включающая \quotation{\TeX}, \quotation{text} и \quotation{context}.

\startSmallPrint

Следовательно, поскольку имя основано на игре слов, \ConTeXt\ следует произносить как \quote{context}, а не \quote{context}, поскольку это означало бы потерю игры слов.

\stopSmallPrint

Интерфейс начал переводиться на английский язык примерно в 2005 году, в результате чего появилась версия, известная как \ConTeXt\ Mark~II, где поясняется \quote{II}, потому что, по мнению разработчиков, предыдущая версия на голландском языке была версией \quote{I}, даже хотя официально это никогда не называлось. После того, как интерфейс был переведен на английский язык, использование системы начало распространяться за пределы Нидерландов, и интерфейс был переведен на другие европейские языки, такие как французский, немецкий, итальянский и румынский. Тем не менее,  \quotation{official} документация для \ConTeXt{} обычно основана на английской версии, и именно с этой версией работает этот документ.

В своей начальной версии \ConTeXt\ Mark~II работал с PdfTeX {\em \TeX\ engine}. Но позже, с появлением движка \XeTeX\, \ConTeXt\ Mark~II был изменен, чтобы можно было использовать этот новый движок, дающий ряд преимуществ по сравнению с PdfTeX. Но когда через несколько лет появился \LuaTeX, было принято решение внутренне изменить конфигурацию работы \ConTeXt{}, чтобы интегрировать все новые возможности, которые предлагал этот новый движок. Так родился \ConTeXt\ Mark~IV, и он был представлен в 2007 году, сразу после презентации \LuaTeX. Очень вероятно, что одним из факторов, повлиявших на решение перенастроить \ConTeXt\ для адаптации его к \LuaTeX, было то, что два из трех основных разработчиков \ConTeXt{}, {\sc Hans Hagen} и {\sc Taco Hoekwater} , также были частью основной команды разработчиков \LuaTeX. Вот почему \ConTeXt\ Mark~IV и \LuaTeX\ родились одновременно и развивались в унисон. Между \ConTeXt{} и \LuaTeX\ существует синергия, которой нет ни в одной другой производной от \TeX; и я сомневаюсь, что кто-то из других может воспользоваться преимуществами \LuaTeX, как \ConTeXt{}.

Между Mark~II и Mark~IV есть много различий, хотя большинство из них являются {\em внутренними}, то есть они связаны с тем, как макрос фактически работает на более низком уровне, так что с точки зрения пользователя различия не заметны: название и параметры макроса остаются прежними. Однако есть некоторые различия, которые влияют на интерфейс и заставляют действовать по-разному в зависимости от того, с какой версией он работает. Этих различий относительно немного, но они влияют на очень важные аспекты, такие как, например, кодирование входного файла или обработка шрифтов, установленных в системе.

\startSmallPrint

Однако было бы очень приятно, если бы где-то был документ, объясняющий (или перечисляющий) заметные различия между Mark~II и Mark~IV. В вики-странице \Context, например, для каждой команды \Context~ существует два вида синтаксиса (очень часто идентичные). Я предполагаю, что один принадлежит Mark II, а другой - Mark IV; и, исходя из этого предположения, я также предполагаю, что первая версия от Mark II. Но правда в том, что вики ничего об этом нам не сообщает.

Однако было бы очень приятно, если бы где-то был документ, объясняющий (или перечисляющий) заметные различия между Mark~II и \Conjecture Mark~IV. В \ConTeXt\ wiki, например, для каждой команды \ConTeXt\ есть {\em два вида синтаксиса} (очень часто идентичные). Я предполагаю, что один принадлежит Mark~II, а другой -- Mark~IV; и, исходя из этого предположения, я также предполагаю, что {\em первая версия} принадлежит Mark~II. Но правда в том, что вики ничего об этом нам не сообщает.

\stopSmallPrint

Тот факт, что различий на уровне языков относительно мало, означает, что во многих случаях мы говорим не о двух версиях, а о двух «разновидностях» \ConTeXt{}. Но независимо от того, называете ли вы их тем или другим, факт в том, что документ, подготовленный для Mark II, обычно не может быть скомпилирован с Mark~IV и наоборот; и если документ смешивает обе версии, он, скорее всего, не будет хорошо компилироваться ни с одной из них; что подразумевает, что автор исходного файла должен начать с принятия решения о том, писать ли для Mark~II или для Mark~IV.

\startSmallPrint

Если мы работаем с разными версиями \ConTeXt{}, хорошим приемом для различения с первого взгляда файлов, предназначенных для Mark~II, и файлов, предназначенных для Mark~IV, является использование разных расширений для имен файлов. Так, например, для любых файлов, которые я написал для Mark~II, я использую расширение \MyKey{.mkii}, а для файлов, написанных для Mark~IV, -- \MyKey{.mkiv}. Это правда, что \ConTeXt{} ожидает, что все исходные файлы будут иметь расширение  \MyKey{.tex}, но мы можем изменить расширение файла, если явно укажем расширение файла при применении \ConTeXt{} к файлу.

\stopSmallPrint

Дистрибутив \ConTeXt{}, установленный в вики, \suite-, включает обе версии, и во избежание путаницы -- я полагаю -- использует разные команды для каждой из них для компиляции файла. Mark~II компилируется с помощью команды \MyKey{texexec}, а Mark~IV -- с помощью команды \MyKey{context}.

\startSmallPrint

Фактически обе команды, \MyKey{context} и \MyKey{texexec}, представляют собой {\em сценарии} с разными параметрами, которые запускают \MyKey{mtxrun}, который, в свою очередь, является сценарием {\sc Lua}.

 \stopSmallPrint

Сегодня Mark~II заморожен, а Mark~IV продолжает развиваться, что означает, что новые версии первого публикуются только при обнаружении ошибок или неисправностей, которые необходимо исправить, в то время как новые версии Mark IV продолжают регулярно публиковаться; иногда два или три раза в месяц, хотя в большинстве этих случаев «новые версии» не вносят заметных изменений в язык, а ограничиваются каким-либо улучшением реализации команды на низком уровне или обновлением некоторых из многих включенных руководств. с раздачей. Даже в этом случае, если мы установили разрабатываемую версию - что я бы порекомендовал и которая установлена по умолчанию вместе с \suite-{} -- имеет смысл время от времени обновлять нашу версию (см. \in{Appendix}[installation_suite], чтобы узнать, как обновить установленную  \suite- версию).

\startSmallPrint

\startsubsubsubsubject
  [title=LMTX и другие альтернативные реализации Mark~IV]

Разработчики \ConTeXt{}, естественно, неугомонны, и поэтому не прекратили разработку \ConTeXt{} Mark~IV; новые версии все еще тестируются и экспериментируются, хотя в целом они очень мало отличаются от Mark~IV и не имеют несовместимости при компиляции, которая существует между Mark~IV и Mark~II.

Таким образом, были разработаны некоторые второстепенные варианты Mark~IV, названные соответственно Mark~VI, Mark~IX и Mark~XI. Из них мне удалось найти лишь небольшую ссылку на Mark~VI в \ConTeXt{} wiki, где говорится, что единственное отличие от Mark~IV заключается в возможности определения команд путем присвоения параметрам, а не числа, как это принято в \TeX, но имя, как это обычно делается почти во всех языках программирования.

Я считаю, что более важным, чем эти небольшие вариации, является появление в мире \ConTeXt{}  (\ConTeXt{} verse?) новой версии под названием LMTX, имя, которое является аббревиатурой LuaMetaTeX: новый {\em движок} \TeX, который представляет собой упрощенную версию \LuaTeX, разработанный с целью экономии ресурсов компьютера; это означает, что LMTX требует меньше памяти и меньше вычислительной мощности, чем \ConTeXt\ Mark~IV.

LMTX был представлен весной 2019 года, и предполагается, что он не повлечет за собой каких-либо внешних изменений языка Mark~IV. Для автора документа не будет разницы при работе с ним; но при его компиляции нужно будет выбирать между выполнением этого с \LuaTeX или с LuaMetaTeX. В \in{Appendix}[installation_suite], касающемся установки \ConTeXt, показана процедура для присвоения разных имен команд каждой из установок (\in{section}[sec:alias]).

\stopsubsubsubject

\stopSmallPrint

\stopsubsection

\startsubsection [title=\ConTeXt\ против \LaTeX]

Учитывая, что наиболее популярным форматом, производным от \TeX{}, является \LaTeX{}, сравнение между этим форматом и \ConTeXt\ неизбежно. Ясно, что мы говорим о разных языках, хотя в некотором роде они связаны друг с другом, поскольку оба они происходят от \TeX; эта связь аналогична той, которая существует, например, между испанским и французским: языки, имеющие общее происхождение (латынь), что означает, что их синтаксис похож, и многие слова на каждом из этих языков отражаются на словах в другом. Но помимо этого семейного сходства, \LaTeX и \ConTeXt\ различаются своей философией и реализацией, поскольку первоначальные цели обоих в некоторой степени противоположны. \LaTeX утверждает, что облегчает использование \TeX, изолируя автора от конкретных типографских деталей, чтобы помочь сосредоточиться на содержании, оставляя детали набора в руках \LaTeX. Это означает, что упрощение использования \TeX\ происходит за счет ограничения огромной гибкости \TeX\ за счет предопределения основных форматов и ограничения количества типографских проблем, которые должен решить автор. В отличие от этой философии, \ConTeXt\ родился в компании, занимающейся набором документов. Поэтому цель состоит не в том, чтобы изолировать автора от деталей набора, а в том, чтобы дать автору абсолютный и полный контроль над ними. Для этого \ConTeXt\ предоставляет единообразный и согласованный интерфейс, который намного ближе к исходному духу  \TeX, чем \LaTeX.

Это различие в философии и основополагающих целях, в свою очередь, приводит к различиям в реализации. \LaTeX, который стремится максимально упростить вещи, не требует использования всех ресурсов  \TeX. В чем-то его суть довольно проста. Поэтому, когда есть необходимость расширить его возможности, необходимо специально написать для этого пакет. Эта упаковка, связанная с \LaTeX, является одновременно достоинством и недостатком: достоинством, потому что огромная популярность \LaTeX вместе с щедростью его пользователей означает, что почти любая потребность, которая у нас может быть, была кем-то удовлетворена раньше, и что для этого есть пакет; но это также недостаток, потому что эти пакеты часто несовместимы друг с другом, а их синтаксис не всегда единообразен. Это означает, что работа с \LaTeX требует постоянного поиска в тысячах уже существующих пакетов, чтобы удовлетворить свои потребности и убедиться, что все они работают вместе.

В отличие от простоты ядра \LaTeX, которое дополняется его расширяемостью с помощью пакетов, \ConTeXt\ спроектирован так, чтобы иметь в себе все или почти все типографские возможности \TeX, поэтому его концепция гораздо более монолитна, но в то же время время он также более модульный. Ядро \ConTeXt\ позволяет нам делать практически всё, и мы гарантируем, что не будет несовместимости между его различными утилитами, не будет необходимости исследовать расширения для того, что нам нужно, и синтаксис языка не изменится только потому, что нам нужен конкретный инструмент.

Это правда, что \ConTeXt\ имеет так называемые модули расширения, некоторые из которых могут рассматривать как выполняющие функцию, аналогичную пакетам \LaTeX, но на самом деле они работают по-разному: модули \ConTeXt предназначены исключительно для включения дополнительных утилит, которые, поскольку они все еще остаются на экспериментальной стадии, еще не включены в ядро, или чтобы разрешить доступ к расширениям, созданным кем-то, не входящим в команду разработчиков \ConTeXt.

Я не считаю, что одна из этих двух {\em философий} предпочтительнее другой. Вопрос скорее зависит от профиля пользователя и его желаний. Если пользователь не хочет иметь дело с типографскими вопросами, а просто создает стандартизированные документы очень высокого качества, вероятно, было бы предпочтительнее выбрать такую ​​систему, как \LaTeX; с другой стороны, пользователю, который любит экспериментировать или которому необходимо контролировать каждую деталь документа, или кому-то, кому нужно разработать специальный макет для документа, вероятно, будет лучше использовать такую ​​систему, как \ConTeXt, где все управление в руках автора; с риском, конечно, не знать, как правильно использовать этот элемент управления.

\stopsubsection

\startsubsection
  [title=Хорошее понимание динамики работы с \ConTeXt]

Когда мы работаем с \ConTeXt, мы всегда начинаем с написания текстового файла (который мы называем исходным файлом), в который, наряду с фактическим содержанием нашего окончательного документа, мы будем включать инструкции (на языке \ConTeXt), которые точно указывают как мы хотим отформатировать документ: общий вид, который мы хотим, чтобы его страницы и абзацы имели, поля, которые мы хотим применить к определенным абзацам, шрифт, который мы хотим отображать, фрагменты, которые мы хотим отображать другим шрифтом, и т. д. После того, как мы написали исходный файл, мы применяем \MyKey{context} -программу из терминала, который обработает его и сгенерирует из него другой файл, в котором содержимое нашего документа будет отформатировано в соответствии с инструкциями, включенными в исходный файл для этой цели. Этот новый файл можно отправить на (коммерческий) принтер, отобразить на экране, разместить в Интернете или распространить среди контактов, друзей, клиентов, учителей, учеников ... или, другими словами, всем, для кого мы написали документ.

Это означает, что при работе с \ConTeXt\ автор работает с файлом, внешний вид которого не имеет ничего общего с окончательным документом: файл, с которым автор работает напрямую, представляет собой текстовый файл, не отформатированный типографически. Таким образом, \ConTeXt\ работает иначе, чем программы, известные как {\em текстовые процессоры}, которые показывают окончательный вид отредактированного документа в то же время, когда мы его пишем. Тем, кто привык к текстовым редакторам, работа с \ConTeXt\ поначалу покажется странной, и может потребоваться некоторое время, чтобы привыкнуть к ней. Однако, как только к этому привыкнешь, понимаешь, что на самом деле этот другой способ работы, различие между рабочим файлом и конечным результатом, на самом деле является преимуществом по многим причинам, среди которых я выделю здесь, без соблюдения какого-либо конкретного порядка, следующий:

\startitemize[n,broad]

  \item Поскольку текстовые файлы «легче» обрабатывать, чем двоичные файлы текстового процессора, и их редактирование требует меньше памяти компьютера, они с меньшей вероятностью будут повреждены и не станут неразборчивыми, когда мы изменим версию создающей их программы. Они также совместимы с любой операционной системой и могут редактироваться с помощью многих текстовых редакторов, поэтому для работы с ними компьютерной системе не обязательно иметь программу, с помощью которой был создан файл, установленной на нем: любое другое редактирование программа подойдет; и в каждой компьютерной системе всегда есть программа для редактирования текста.

  \item Поскольку различие между рабочим документом и окончательным документом помогает отличить фактическое содержание документа от его внешнего вида, позволяя автору сосредоточиться на содержании на этапе создания и сосредоточиться на внешнем виде на этапе набора.

  \item Потому что это позволяет быстро и точно изменить внешний вид документа, так как это определяется командами \ConTeXt, которые можно легко идентифицировать.

  \item  Поскольку эта возможность для изменения внешнего вида, с другой стороны, позволяет нам легко генерировать две (или более) разные версии из одного контента: возможна одна версия, оптимизированная для печати на бумаге, а другая предназначена для отображения на экране, адаптирована к размеру последней и, возможно, включает гиперссылки, которые не имеют смысла в бумажном документе.

  \item Потому что типографских ошибок (опечаток), которые часто встречаются в текстовых редакторах, например выделения курсивом за пределы последнего символа слова, также легко избежать.

  \item Поскольку, хотя рабочий файл не распространяется и предназначен \quote{только для наших глаз}, можно включать аннотации и наблюдения, комментарии и предупреждения для нас самих для последующих редакций или версий, при этом не сомневаясь, что они не будут появятся в отформатированном файле для распространения.

  \item Потому что качество, которое может быть получено при одновременной обработке всего документа, намного выше, чем то, которое может быть достигнуто с помощью программы, которая должна принимать типографские решения во время написания документа.

  \item И так далее.


\stopitemize

Все вышеперечисленное означает, что, с одной стороны, при работе с \ConTeXt, как только мы овладеем им, мы станем более эффективными и продуктивными, а с другой стороны, качество печати, которое мы можем получить, намного превосходит то, что мы можем можно получить с помощью так называемых текстовых редакторов. И хотя последние действительно проще в использовании, на самом деле они не намного проще в использовании. Поскольку, хотя \ConTeXt, как мы уже говорили, действительно содержит 3500 инструкций, обычному пользователю \ConTeXt\ не нужно знать их все. Чтобы делать то, что обычно делают с текстовыми редакторами, нам нужно знать только инструкции, которые позволяют нам указать структуру документа, несколько инструкций, касающихся общих типографских ресурсов, таких как жирный шрифт или курсив, и, возможно, как создать список, или сноска. В общей сложности не более 15 или 20 инструкций позволят нам делать почти все то, что делается с помощью текстового процессора. Остальные инструкции позволяют нам делать разные вещи, которые мы обычно не можем делать с текстовым процессором или которые очень трудно выполнить. Мы можем сказать, что хотя научиться использовать \ConTeXt\ сложнее, чем научиться пользоваться текстовым процессором, это потому, что мы можем сделать намного больше с помощью \ConTeXt.

\stopsubsection

\startsubsection
  [title=Получение помощи для \ConTeXt]

% \adaptlayout[+2]

Хотя мы новички в этом, лучшее место для получения помощи по \ConTeXt, несомненно, находится в Wiki, которая изобилует примерами и имеет хорошую поисковую систему, особенно если кто-то хорошо понимает английский. Конечно, мы также можем найти помощь в Интернете, но здесь игра слов в названии \ConTeXt\ сыграет с нами злую шутку, потому что поиск по слову «контекст» вернет миллионы результатов, большинство из которых не будет иметь ничего общего с тем, что мы ищем. Чтобы найти информацию о \ConTeXt, вам нужно добавить что-нибудь к слову «контекст»; например, «tex», или «Mark~IV», или «Hans Hagen» (один из создателей \ConTeXt), или \quotation{Pragma ADE}, или что-то подобное. Также может быть полезно искать информацию, используя название wiki: \quotation{contextgarden}.

Когда мы узнаем что-то еще о \ConTeXt\ мы можем проконсультироваться с некоторыми из многих документов, включенных в \suite-, или даже обратиться за помощью в\goto{TeX -- LaTeX Stack Exchange}[url(https://tex.stackexchange.com/)] или в список рассылки для\ConTeXt\
(\goto{NTG-context}[url(https://mailman.ntg.nl/mailman/listinfo/ntg-context)]). К последним относятся люди, которые знают о \ConTeXt\  больше всего, но правила хорошего кибер-этикета требуют, чтобы, прежде чем задавать вопрос, мы должны были заранее постараться найти ответ сами.

\stopsubsection

\stopsubsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% TeX-master: "../introCTX.mkiv"
%%% coding: utf-8-unix
%%% End:
%%% vim: tw=72:
