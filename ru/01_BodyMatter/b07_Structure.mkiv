%%% File:     b07_Structure.mkiv
%%% Author:  Joaquín Ataz-López
%%% Begun:      March 2020
%%% Concluded: May 2020
%%% Title:  This is the second chapter I tackled, and from my point of
%           view one of the most important. One by one I was trying out
%           the options for setuphead, and I was unable to discover what
%           some did or how to get them to work.  I suspect that this is
%           (1) I had just started working with ConTeXt, and by July,
%           August I fel much more comfortable but at that time it all
%           looked like Chinese to me, and (2) because I did my tests in
%           a document where I wrote the sections in the classic style
%           (\chapter or \section instead of \startchapter or
%           \startsection).
%
%%% Edited with: Emacs + AuTeX - And at times vim + context-plugin
%%%

\environment ../introCTX_env.mkiv

\startcomponent b07_Structure.mkiv

\startchapter
  [
    reference=cap:structure,
    title=Структура документа,
  ]

\TocChap

\startsection
  [title=Структурные подразделения в документах]

За исключением очень коротких текстов (например, письма), документ обычно разбивается на блоки или текстовые группы, которые обычно следуют иерархическому порядку. Не существует стандартного способа наименования этих блоков: например, в романах структурные подразделения обычно называются \quotation{chapters}, хотя некоторые - более длинные - имеют блоки большего размера, обычно называемые \quotation{parts}, которые группируют числа. глав вместе. В театральных произведениях различают \quotation{действия} и \quotation{сцены}. Учебные пособия делятся (иногда) на \quotation{части} и \quotation{уроки}, \quotation{темы} или \quotation{главы}, которые, в свою очередь, также часто имеют внутренние подразделения; такие же сложные иерархические подразделения часто существуют в других академических или технических документах (таких как тексты, подобные настоящему, посвященные объяснению компьютерной программы или системы. Даже законы структурированы в \quote{книги} (самые длинные и самые сложные, такие как в виде Кодексов), \quotation{title}, \quotation{chapters}, \quotation{section}, \quotation{subsections}. Научно-технические документы также могут достигать шести, семи, а иногда и восьми уровней глубины вложенности для такого рода подразделения.

В этой главе основное внимание уделяется анализу механизма, который \ConTeXt\ предлагает для поддержки этих структурных подразделений. Я буду называть их общим термином \quotation{sections}.

\startSmallPrint

Нет четкого термина, который позволил бы нам в общем обозначать все эти виды структурных подразделений. Термин \quotation{section}, который я выбрал, фокусируется на структурном делении, а не на чем-либо еще, хотя недостатком является то, что одно из заранее определенных структурных подразделений \ConTeXt называется \quotation{section}. Я надеюсь, что это не вызовет путаницы, полагая, что будет достаточно легко определить из контекста, говорим ли мы о разделе как об общей и общей ссылке на структурные подразделения или о конкретном подразделении, которое \ConTeXt\ называет section.

\stopSmallPrint

Каждый «раздел» \quotation{section} (в общем) подразумевает:

\startitemize
 
  \item Достаточно большое {\em структурное подразделение документа}, которое, в свою очередь, может включать другие подразделения более низкого уровня. С этой точки зрения \quotation{sections}  «разделы» подразумевают текстовые блоки с иерархической связью между ними. С точки зрения разделов документ в целом можно рассматривать как дерево. Документ {\em сам по себе} является стволом, каждая из его глав - ветвью, которая, в свою очередь, может иметь ветви, которые также могут разделяться, и так далее.

Наличие четкой структуры очень важно для чтения и понимания документа. Но это задача автора, а не наборщика. И хотя \ConTeXt\ не может сделать нас лучшими авторами, чем мы, полный набор команд разделов, которые он включает, с четкой иерархией между ними, может помочь нам в написании более структурированных документов.

   \item  {\em Имя структуры}, которое мы могли бы назвать ее «заголовком»  \quotation{title} или «меткой»  \quotation{label}. Это наименование структуры печатается:

  \startitemize

    \item Всегда (или почти всегда) в том месте документа, где начинается структурное деление.

    \item Иногда также в оглавлении, в верхнем или нижнем колонтитуле страниц, занимаемых данным разделом.

  \stopitemize

  \ConTeXt\ позволяет нам автоматизировать все эти задачи таким образом, что функции форматирования, с помощью которых должно быть напечатано название структурной единицы, должны указываться только один раз, а также следует или не следует включать его в оглавление, или в верхних или нижних колонтитулах. Для этого \ConTeXt\ нужно только знать, где начинается и заканчивается каждая структурная единица, как она называется и на каком иерархическом уровне она находится.

\stopitemize

\stopsection

\startsection
  [
    reference=sec:sectiontypes,
    title=Типы разделов и их иерархия,
  ]

\ConTeXt\ различает {\em пронумерованные} и {\em ненумерованные разделы}. Первые, как следует из их названия, нумеруются автоматически и отправляются в оглавление, а иногда и в верхние и / или нижние колонтитулы страниц.

\ConTeXt\ имеет иерархически упорядоченные предопределенные команды разделов, представленные \in{table}[tbl:sectioned].

\placetable
  [here]
  [tbl:sectioned]
  {Команды секций в \ConTeXt}
{
  \starttabulate[|l|l|l|]
\HL
\NC {\bf Level}
\NC {\bf Numbered sections}
\NC {\bf Unnumbered sections}
\NR
\HL
\NC 1
\NC{\tt \backslash part}\PlaceMacro{part}\PlaceMacro{startpart}
\NC --
\NR
\NC 2
\NC{\tt \backslash chapter}\PlaceMacro{chapter}\PlaceMacro{startchapter}
\NC{\tt \backslash title}\PlaceMacro{title}\PlaceMacro{starttitle}
\NR
\NC 3
\NC{\tt \backslash section}\PlaceMacro{section}\PlaceMacro{startsection}
\NC{\tt \backslash subject}\PlaceMacro{subject}\PlaceMacro{startsubject}
\NR
\NC 4
\NC{\tt \backslash subsection}\PlaceMacro{subsection}\PlaceMacro{startsubsection}
\NC{\tt \backslash subsubject}\PlaceMacro{subsubject}\PlaceMacro{startsubsubsubject}
\NR
\NC 5
\NC{\tt \backslash subsubsection}\PlaceMacro{subsubsection}\PlaceMacro{startsubsubsection}
\NC{\tt \backslash subsubsubject}\PlaceMacro{subsubsubject}\PlaceMacro{startsubsubsubject}
\NR
\NC 6
\NC{\tt \backslash subsubsubsection}\PlaceMacro{subsubsubsection}\PlaceMacro{startsubsubsubsection}
\NC{\tt \backslash subsubsubsubject}\PlaceMacro{subsubsubsubject}\PlaceMacro{startsubsubsubsubject}
\NR
\NC ...
\NC ...
\NC ...
\NR
\HL
\stoptabulate
}

В отношении заранее определенных разделов следует сделать следующие пояснения:

\startitemize

  \item В \in{table}[tbl:sectioned] команды раздела показаны в их традиционном виде. Но мы сразу увидим, что они также могут использоваться как окружения (например, (\tex{startchapter  ... \stopchapter} и что это действительно рекомендуемый подход.

  \item Таблица содержит только первые 6 уровней раздела. Однако в своих тестах я обнаружил до 12 уровней: после tex{subsubsubsection} идет \tex{subsubsubsubsection}, и так далее до\tex{subsubsubsubsubsubsubsubsubsection}, или \tex{subsubsubsubsubsubsubsubsubsubject}.

  \startSmallPrint

Но следует иметь в виду, что указанные выше (чрезмерно глубокие) нижние уровни вряд ли улучшат понимание текста! Во-первых, у нас, вероятно, будут большие разделы, которые неизбежно будут посвящены нескольким вопросам, и это затруднит читателю {\em понимание} их содержания. Чрезмерная глубина уровней также может означать, что читатель теряет общее ощущение текста, и в результате возникает эффект чрезмерной фрагментации задействованного материала. Насколько я понимаю, в целом достаточно четырех уровней; очень иногда может потребоваться перейти на шесть или семь уровней, но большая глубина редко бывает хорошей идеей.

С точки зрения написания исходного файла тот факт, что создание дополнительных подуровней означает добавление еще одного \quotation{подуровня} к предыдущему уровню, может сделать исходный файл почти нечитаемым: пытаться определить уровень команды - не шутка. назвал \quotation{subsubsubsubsubsection}, так как я должен подсчитать все \quotation{subs}! Поэтому я советую, что если нам действительно нужно так много уровней глубины, начиная с пятого уровня (подсекция), нам лучше определить наши собственные команды раздела \in{section}[sec:definehead], давая им имена, которые более ясны, чем предопределенные.

  \stopSmallPrint

  \item Самый высокий уровень раздела (\tex{part}) существует только для пронумерованных заголовков и имеет особенность, заключающуюся в том, что заголовок части не печатается. Однако, даже если заголовок не печатается, вводится пустая страница (на которой мы можем предположить, что заголовок печатается после того, как пользователь перенастроил команду), и нумерация {\em части} принимается во внимание для расчета нумерации главы и других разделов.

  \startSmallPrint

Причина, по которой версия \tex{part} по умолчанию ничего не печатает, заключается в том, что, согласно вики \ConTeXt, почти всегда заголовок на этом уровне требует определенного макета; и хотя это правда, мне это не кажется достаточно веской причиной, поскольку на практике главы и разделы также часто переопределяются, и тот факт, что части ничего не печатают, вынуждает начинающего пользователя окунуться в документацию чтобы увидеть, что происходит не так.

  \stopSmallPrint

  \item Хотя первый уровень разделения является \quotation{частью}, это только теоретический и абстрактный характер. В конкретном документе первый уровень секционирования будет соответствовать первой команде секционирования в документе. То есть в документе, который включает не части, а главы, глава будет первым уровнем. Но если документ также не включает главы, а только разделы (section), иерархия для этого документа начнется с разделов (section).

\stopitemize

\stopchapter

\startsection
  [
    reference=sec:sectionsyntax,
    title=Синтаксис, общий для команд раздела,
  ]

Все команды раздела, включая любые уровни, созданные пользователем (см. \in{section}[sec:definehead]), допускают следующие альтернативные формы синтаксиса (если, например, мы используем уровень \MyKey{section}):

\vbox{\starttyping
\section [Label] {Title}
\section [Options]
\startsection [Options] [Variables] ... \stopsection
\stoptyping}

В трех приведенных выше способах аргументы в квадратных скобках необязательны и могут быть опущены. Мы рассмотрим их отдельно, но в первую очередь это помогает прояснить, что в Mark IV рекомендуется третий из этих трех подходов.

\startitemize

  \item В первой синтаксической форме, которую мы могли бы назвать \quotation{{\em классической}}, команда принимает два аргумента: один необязательный в квадратных скобках, а другой - обязательный в фигурных скобках. Необязательный аргумент нужен для того, чтобы связать команду с меткой, которая будет использоваться для внутренних ссылок (см. \in{section}[sec:references]).
Обязательным в фигурных скобках является название раздела.

  \item Две другие формы синтаксиса больше похожи на стиль \ConTeXt: все, что нужно знать команде, передается через значения и параметры, заключенные в квадратные скобки.

  \startSmallPrint

Напомним, что в разделах \in{sections}[sec:command scope] и \in{}[sec:command options] я сказал, что в \ConTeXt\ область действия команды указывается в фигурных скобках, а ее параметры - в квадратных скобках. Но если подумать, заголовок конкретной команды секционирования не входит в область ее применения, поэтому, чтобы соответствовать общему синтаксису, его следует вводить не в фигурные скобки, а качестве опции.  \ConTeXt\ допускает это исключение, потому что это классический способ выполнения действий в \TEX, но он предоставляет альтернативные формы синтаксиса, которые больше соответствуют его общему дизайну.

  \stopSmallPrint

Параметры относятся к типу присвоения значений (OptionName = Value) и выглядят следующим образом:

  \startitemize

  \item {\tt\bf reference}: метка для перекрестных ссылок.

  \item {\tt\bf title}: заголовок раздела, который будет напечатан в теле документа.

  \item {\tt\bf list}: заголовок раздела, который будет напечатан в оглавлении.

  \item {\tt\bf marking}: заголовок раздела, который будет напечатан в верхних или нижних колонтитулах страницы.

  \item {\tt\bf bookmark}: заголовок раздела, который будет преобразован в закладку в файле PDF.

  \item {\tt\bf ownnumber}: эта опция используется в случае, если раздел не нумеруется автоматически; в этом случае эта опция будет включать номер, присвоенный рассматриваемому разделу.

  \stopitemize

Конечно, параметры \MyKey{list} «список», \MyKey{marking} «отметка» и \MyKey{bookmark} «закладка» следует использовать только в том случае, если мы хотим использовать другой заголовок для замены основного набора заголовков с опцией \MyKey{title} «заголовок». Это очень полезно, например, когда заголовок слишком длинный для заголовка; хотя для этого мы также можем использовать команды \PlaceMacro{nomarking}\tex{nomarking} и \PlaceMacro{nolist}\tex{nolist} (что-то очень похожее). С другой стороны, мы должны иметь в виду, что если текст заголовка (опция \quotation{title}) включает любые запятые, то его нужно будет заключить в фигурные скобки, как полный текст, так и запятую, чтобы гарантировать, что \ConTeXt\  знает, что запятая является частью заголовка. То же самое и с опциями: \quotation{list}, \quotation{marking} и \quotation{bookmark}. Поэтому, чтобы не следить за тем, есть ли в названии запятые, я считаю хорошей идеей выработать привычку всегда заключать значение любого из этих параметров в фигурные скобки.

\stopitemize

Так, например, следующие строки создадут главу под названием «Тестовая глава», связанную с меткой «test» для перекрестных ссылок, в то время как заголовок будет «Chapter test» вместо «A Test Chapter».

\vbox{\starttyping
\chapter
  [
    title={A Test Chapter},
    reference={test},
    marking={Chapter test}
  ]
\stoptyping}

Синтаксис \tex{startSectionType} превращает раздел в {\em среду}. Это больше согласуется с тем фактом, что, как я сказал в начале, в фоновом режиме каждый раздел представляет собой дифференцированный блок текста, хотя \ConTeXt\ по умолчанию не считает {\em среды}, созданные командами раздела, {\em группами}. Точно так же эту процедуру рекомендует Mark IV; вполне возможно, потому что этот способ создания разделов требует от нас четко указывать, где начинается и заканчивается каждый раздел, что упрощает согласованность структуры и, скорее всего, лучше поддерживает вывод XML и EPUB. Фактически, для вывода XML это необходимо.

Когда мы используем \tex{startSectionName}, в квадратных скобках разрешается использовать одну или несколько переменных в качестве аргументов. Затем их значение можно будет использовать позже в других местах документа с помощью команды \PlaceMacro{structureuservariable}\tex{structureuservariable}.

\startSmallPrint

Наличие пользовательских переменных обеспечивает очень расширенное использование в \ConTeXt\ благодаря тому факту, что могут быть приняты решения о том, компилировать фрагмент или нет, или каким способом мы это сделаем, или с помощью какого шаблона в зависимости от значения конкретной переменной. Однако эти утилиты \ConTeXt\ выходят за рамки материала, с которым я хотел бы ознакомиться в этом введении.

\stopSmallPrint

\stopsection

\startsection
  [
    reference=sec:setuphead,
    title=Формат и конфигурация разделов и их заголовков,
  ]

\startsubsection
  [title=Команды \tex{setuphead} и \tex{setupheads}]
\PlaceMacro{setuphead}\PlaceMacro{setupheads}

По умолчанию \ConTeXt\ назначает определенные функции каждому уровню секционирования, которые в основном (но не только) влияют на формат, в котором заголовок отображается в основной части документа, но не на способ отображения заголовка в оглавлении или заголовки и колонтитулы. Мы можем изменить эти функции с помощью команды \tex{setuphead} , чей синтаксис:

\type{\setuphead[Sections][Options]}

где

\startitemize

  \item {\tt\bf Sections} Разделы - это имя одного или нескольких разделов (разделенных запятыми), на которые повлияет команда. Это может быть:

  \startitemize

  \item Любой из предопределенных разделов (часть, глава, заголовок и т. Д.), И в этом случае мы можем ссылаться на них либо по имени, либо по их уровню. Для обозначения их по уровню мы используем слово \quotation{{\tt section-{\em NumLevel}}}, где {\em NumLevel} - это номер уровня соответствующего раздела. Таким образом, \MyKey{section-1} равен \MyKey{part}, \MyKey{section-2} равен \MyKey{chapter} и т.д.

  \item Любой вид раздела мы сами определили. По этому поводу см. \in{section}[sec:definehead].

  \stopitemize

  \item {\tt\bf Options} это опции конфигурации. Они относятся к типу явного присвоения значения (OptionName = value). Число подходящих вариантов очень велико (более шестидесяти), поэтому я объясню, сгруппировав их по категориям в соответствии с их функциями. Однако я должен отметить, что мне не удалось определить, для чего предназначены некоторые из этих параметров и как они используются. Об этих вариантах я говорить не буду.

\stopitemize

Ранее я сказал, что \tex{setuphead} влияет на явно указанные разделы. Но это не означает, что изменение одного раздела никоим образом не должно влиять на другие, если они не были прямо упомянуты в команде. На самом деле верно и обратное: изменение раздела влияет на другие разделы, связанные с ним, даже если это не было явно указано в команде. Связь между различными разделами бывает двух видов:

\startitemize

  \item 

Ненумерованные команды связаны с соответствующей пронумерованной командой того же уровня, так что изменение внешнего вида пронумерованной команды повлияет на ненумерованную команду того же уровня; но не наоборот: изменение ненумерованной команды не влияет на нумерованную команду. Это означает, например, что если мы изменим какой-то аспект \MyKey{chapter} (level 2) (уровень 2), мы также изменим этот аспект в «заголовке»; но изменение «заголовка» \MyKey{title} не повлияет на «главу» \MyKey{chapter}.


  \item Команды связаны иерархически, так что если мы изменим определенные функции на определенном уровне, это изменение повлияет на все уровни, следующие за ним. Это происходит только с некоторыми функциями. Цвет, например: если мы устанавливаем, что подразделы будут отображаться красным, мы также меняем на красный цвет подподразделы, подподразделы и т.д. Но этого не происходит с другими функциями, например, со стилем шрифта

\stopitemize

Наряду с \tex{setuphead} \ConTeXt\ предоставляет команду \tex{setupheads}, которая глобально влияет на все команды раздела. Со ссылкой на эту команду в вики \ConTeXt\ говорится, что некоторые люди сказали, что она не работает. Согласно моим тестам, эта команда работает с некоторыми параметрами, но не работает с другими. В частности, он не работает с опцией  \MyKey{style} «стиль», что поразительно, поскольку стиль заголовков, скорее всего, единственное, что мы хотели бы изменить глобально, чтобы он повлиял на все заголовки. Но, согласно моим тестам, он работает с другими параметрами, такими как, например,\MyKey{number} или \MyKey{color}. Так, например, \tex{setupheads[color=blue]} гарантирует, что все заголовки в нашем документе будут напечатаны синим цветом.

Поскольку мне немного лень проверять каждую опцию, чтобы увидеть, работает она или нет с \tex{setupheads} (помните, что их более шестидесяти), в дальнейшем я буду ссылаться только на \tex{setuphead}.

Наконец: прежде чем исследовать конкретные параметры, мы должны отметить то, что говорится в \ConTeXt\ wiki, хотя, вероятно, это сказано не в нужном месте: некоторые параметры работают только в том случае, если мы используем синтаксис \cmd{start{\em SectionName}}.

\startSmallPrint

Эта информация относится к \tex{setupheads}, но не для \tex{setuphead}, где объясняется большая часть параметров и где, если это должно быть сказано только в одном месте, кажется наиболее разумным местом для этого. С другой стороны, в информации упоминается только вариант опции  \MyKey{изнутри}, но не уточняется, происходит ли это также с другими опциями.

\stopSmallPrint

\stopsubsection

\startsubsection
  [
    reference=sec:title parts,
    title=Части заголовка раздела,
  ]

Прежде чем перейти к конкретным параметрам, которые позволяют нам настраивать внешний вид заголовков, рекомендуется начать с указания, что заголовок раздела может иметь до трех разных частей, которые \ConTeXt\ позволяет нам форматировать вместе или по отдельности.
Эти элементы заголовка следующие:

\startitemize

  \item {\bf Само название}, то есть текст, из которого он состоит. В принципе, этот заголовок отображается всегда, за исключением разделов типа  \MyKey{part}, где заголовок не отображается по умолчанию. Параметр, определяющий, отображается ли заголовок или нет, - это \MyKey{placehead}, значения которого могут быть \MyKey{yes}, \MyKey{no},  \MyKey{hidden}, \MyKey{empty} или \Doubt\MyKey{section}. Смысл первых двух ясен. Но я не так уверен в результатах остальных значений этого параметра.
Следовательно, если мы хотим, чтобы заголовок отображался в разделах первого уровня, наша настройка должна быть такой:

  \vbox{\starttyping
    \setuphead
      [part]
      [placehead=yes]
  \stoptyping}

Заголовки определенных разделов, как мы уже знаем, могут автоматически отправляться в колонтитулы и оглавление. Используя  {\tt list} и {\tt marking}  команд раздела, мы можем указать альтернативный заголовок, который будет отправлен вместо него. Также возможно при написании заголовка использовать команды \PlaceMacro{nolist}\tex{nolist} или \PlaceMacro{nomarking}\tex{nomarking} , чтобы определенные части заголовка были заменены многоточием в оглавлении или заголовке. Например:

  \vbox{\starttyping
    \chapter{Influences of \nomarking{19th century} impressionism \nomarking{in the 21st century}}
  \stoptyping}

Напишет \quotation{Influences of ... impressionism ...} в header.

  \item {\bf Нумерация}. Это справедливо только для пронумерованных разделов (part, chapter, section, subsection...), но не для ненумерованных разделов (title, subject, subsubject). Фактически, пронумерован конкретный раздел или нет, зависит от опций \MyKey{number} и \MyKey{incrementnumber}, возможные значения которых -- {\tt yes} и {\tt no}. В пронумерованных разделах оба они установлены как yes, а в ненумерованных разделах - как no.

    \startSmallPrint

Почему есть два варианта управления одним и тем же? Потому что на самом деле две опции управляют двумя вещами; один - пронумерован раздел или нет ({\tt incrementnumber} инкрементный номер), а другой - отображается ли номер или нет ({\tt number} номер). Если для раздела установлены {\tt
   incrementnumber=yes} и {\tt number=no}, мы получим раздел, который не пронумерован внешне (визуально), но по-прежнему учитывается внутри. Это было бы полезно для включения такого раздела в оглавление, поскольку обычно оно включает только пронумерованные разделы. По этому поводу см. \in{subsection}[sec:toc with unnumbered secs] в \in{section} [sec:manual adjustments]Подраздел A.

  \stopSmallPrint

  \item {\bf The label} Ярлык для заголовка. В принципе этот элемент в заголовках пуст. Но мы можем связать с ним значение, и в этом случае перед номером и фактическим заголовком будет напечатана метка, которую мы присвоили этому уровню. Например, в заголовках глав мы можем захотеть напечатать слово «Глава» или слово «Часть» для частей. Мы не используем для этого \tex{setuphead}, а используем команду \tex{setuplabeltext}. Эта команда позволяет нам присвоить текстовое значение меткам различных уровней секционирования. Так, например, если мы хотим написать «Глава» в нашем документе перед заголовками глав, мы должны установить:

  \vbox{\starttyping
    \setuplabeltext
      [chapter=Глава~]
  \stoptyping}

В этом примере после присвоенного имени я включил зарезервированный символ \quotation{\lettertilde}, который вставляет неразрывное пробел после слова. Если мы не против, чтобы между меткой и числом произошел разрыв строки, мы могли бы просто добавить пробел. Но это пустое пространство (любого рода) важно; без него номер будет привязан к метке, и мы увидим, например, «Chapter1» вместо «Chapter 1».

\stopitemize

\stopsubsection

\startsubsection
  [title=Контроль нумерации \\(в пронумерованных разделах)]

Мы уже знаем, что предопределенные пронумерованные разделы (часть, глава, раздел ...) и то, пронумерован ли конкретный раздел или нет, зависит от параметров \MyKey{number} и \MyKey{incrementnumber}, установленных с помощью \tex{setuphead}.

По умолчанию нумерация различных уровней выполняется автоматически, если только мы не присвоили значение \MyKey{yes} параметру  \MyKey{ownnumber}. Когда \MyKey{ownumber=yes}  должен быть указан номер, присвоенный каждой команде. Это делается:

\startitemize

\item Если команда вызывается с использованием классического синтаксиса, путем добавления аргумента с числом перед текстом заголовка. Например:\\
 \cmd{chapter\{13\}\{Название главы\}} создаст главу, которой вручную был присвоен номер 13.

  \item Если команда была вызвана с синтаксисом, специфичным для \ConTeXt\ (\tex{SectionType [Options]} или \tex{startSectionType[Options]}), с параметром \MyKey{ownnumber}. Например:

\stopitemize

Когда \ConTeXt\ автоматически выполняет нумерацию, он использует внутренние счетчики, в которых хранятся номера разных уровней; таким образом, есть счетчик для частей, другой для глав, другой для разделов и т. д. Каждый раз, когда \ConTeXt\ находит команду раздела, он выполняет следующие действия:

\startitemize[packed]

  \item Увеличивает счетчик, связанный с уровнем, соответствующим этой команде, на \quote{1}.

  \item сбрасывает связанные счетчики на всех уровнях ниже, чем у данной команды, на 0.

\stopitemize

Это означает, например, что каждый раз, когда обнаруживается новая глава, счетчик глав увеличивается на 1, а все команды раздела, подраздела, подраздела и т.д. возвращаются на 0; но счетчик не влияет на Части.

Чтобы изменить число, с которого следует начать отсчет, используйте команду \PlaceMacro{setupheadnumber}\tex{setupheadnumber} следующим образом:

\type{\setupheadnumber[SectionType][Номер, с которого начинается счет]}

где  {\em Number, от которого следует вести счет}, -- это число, от которого будут считаться секции любого типа. Таким образом, если  {\em Number, от которого следует вести счет}, равен нулю, первая секция будет равна 1; если он равен 10, первая секция будет 11.

Эта команда также позволяет нам изменить шаблон для автоматического увеличения; таким образом, мы можем, например, подсчитать главы или разделы попарно или по три. Итак,  \tex{setupheadnumber[section][+5]} даст главы с номерами 5 из пяти; и \tex{setupheadnumber[chapter][14, +5]} покажет, что первая глава начинается с 15 (14 + 1), вторая будет 20 (15 + 5), третья 25 и т. д. 

По умолчанию нумерация разделов отображается на арабском языке. номера, и нумерация всех предыдущих уровней включена. То есть: в документе, в котором есть части, главы, разделы и подразделы, конкретный подраздел будет указывать, какой части, главе и разделу он соответствует. Таким образом, четвертый подраздел второго раздела третьей главы первой части будет  \quotation{1.3.2.4}.

Два основных параметра, управляющих отображением чисел:

\startitemize

  \item {\tt\bf conversion} (преобразование):  управляет типом используемой нумерации. Допускает множество значений в зависимости от типа нумерации, которую мы хотим:  \reference[Num:conversion]{Numerical conversion}

  \startitemize

    \item {\bf Нумерация арабскими цифрами}: Классическая нумерация: 1, 2, 3, ... получается с помощью значений {\tt n, N} or {\tt цифр}.

    \item {\bf Нумерация римскими цифрами}. Сделать это можно тремя способами:

    \startitemize[packed]

      \item Римские числа в верхнем регистре:{\tt I, R, Romannumerals}.
      \item Римские числа в нижнем регистре: {\tt i, r, Romannumerals}.
      \item Римские цифры в заглавных буквах (small caps): {\tt KR, RK}.

    \stopitemize

    \item {\bf Нумерация буквами}. Сделать это можно тремя способами:

    \startitemize[packed]

      \item Заглавные буквы: {\tt A, Символ}
      \item Строчные буквы: {\tt a, символ}
      \item Буквы в заглавных буквах (small caps): {\tt AK, KA}
    
    \stopitemize

  \item {\bf Нумерация прописью}. То есть мы пишем слово, обозначающее число. Так, например, \quote{3} превращается в \quote{Три}. TЭто можно сделать двумя способами:

  \startitemize[packed]

    \item Слова, начинающиеся с заглавной буквы: {\tt Слова}.
    \item Все слова в нижнем регистре: {\tt слова}.

  \stopitemize

  \item {\bf Нумерация с помощью символов}: в нумерации на основе символов используются разные наборы символов, в которых каждому символу присваивается числовое значение. Поскольку наборы символов, используемые \ConTeXt\, имеют очень ограниченное количество, этот тип нумерации целесообразно использовать только тогда, когда максимальное число, которое должно быть достигнуто, не слишком велико. \ConTeXt\ предоставляет четыре различных набора символов: набор 0, набор 1, набор 2 и набор 3 соответственно. Ниже приведены символы, которые каждый из этих наборов использует для нумерации. Обратите внимание, что максимальное число, которое может быть достигнуто, составляет 9 в наборе 0 и наборах 1 и 12 в наборе 2 и наборе 3:

    \startitemize[empty, packed]\reference[examples of conversion set]{}
      \item Set 0: \dorecurse{9}{\convertnumber{set 0}{#1}\quad}\par
      \item Set 1: \dorecurse{9}{\convertnumber{set 1}{#1}\quad}\par
      \item Set 2: \dorecurse{12}{\convertnumber{set 2}{#1}\quad}\par
      \item Set 3: \dorecurse{12}{\convertnumber{set 3}{#1}\quad}\par

    \stopitemize

  \stopitemize

  \item {\tt\bf sectionsegments:}  этот параметр позволяет нам контролировать, отображать ли нумерацию для предыдущих уровней. Мы можем указать, какие предыдущие уровни будут отображаться. Это делается путем определения начального и последнего отображаемых уровней. Идентификация уровня может быть произведена по его номеру (часть = 1, раздел = 2, раздел = 3 и т. Д.) Или имени (часть, глава, раздел и т. Д.). Так, например, \MyKey{sectionsegments=2:3} указывает, что должна отображаться нумерация глав и разделов. Это в точности то же самое, что сказать \MyKey{sectionsegments=chapter:section}. Если мы хотим указать, что отображаются все числа выше определенного уровня, мы можем использовать в качестве значения \MyKey{optionsegments} {\em Initial Level:all} или  {\em InitialLevel:*}. Например, \MyKey{sectionsegments=3:*} означает, что нумерация отображается, начиная с уровня 3 (раздел).

\stopitemize

So, for example, imagine that we want the parts to be numbered with
Roman numerals in capital letters; the chapters with Arabic numerals,
but without including the number of the part to which they belong; the
sections and subsections with Arabic numerals including the chapter and
section numbers, and the subsections with capital letters. We should
write the following:

\vbox{\starttyping
  \setuphead[part][conversion=I]
  \setuphead[chapter]     [conversion=n, sectionsegments=2]
  \setuphead[section]     [conversion=n, sectionsegments=2:3]
  \setuphead[subsection]  [conversion=n, sectionsgments=2:4]
  \setuphead[subsubsection][conversion=A, sectionsegments=5]
\stoptyping}

\stopsubsection

\startsubsection
  [
    reference=sec:titlestyle,
    title=Цвет и стиль заголовка,
  ]

У нас есть следующие варианты управления стилем и цветом:

\startitemize

  \item {\bf The style}  Стиль контролируется параметрами  \MyKey{style}, \MyKey{numberstyle} и \MyKey{textstyle} в зависимости от того, хотим ли мы повлиять на весь заголовок, только на нумерацию или только на текст. С помощью любой из этих опций мы можем включать команды, влияющие на шрифт; а именно: конкретный шрифт, стиль (римский, без засечек или пишущая машинка), альтернативный (курсив, полужирный, наклонный ...) и размер. Если мы хотим указать только одну функцию стиля, мы можем сделать это, используя имя стиля (например, «жирный» для полужирного), или указав его аббревиатуру («bf»), или команду, которая его генерирует (\tex{bf}, выделенные жирным шрифтом). Если мы хотим указать несколько функций одновременно, мы должны сделать это с помощью команд, которые их генерируют, записывая их одну за другой. С другой стороны, имейте в виду, что если мы укажем только одну функцию, остальные функции стиля будут установлены автоматически со значениями документа по умолчанию, поэтому редко рекомендуется устанавливать только одну функцию стиля.

  \item {\bf The colour} Цвет устанавливается с помощью параметров \MyKey{color}, \MyKey{numbercolor} и \MyKey{textcolor} в зависимости от того, хотим ли мы установить цвет всего заголовка или только цвет нумерации или текста. Указанный здесь цвет может быть одним из предопределенных цветов \ConTeXt\ или каким-либо другим цветом, который мы определили сами и ранее присвоили имя. Однако здесь мы не можем напрямую использовать команду определения цвета.

\stopitemize

В дополнение к этим шести параметрам, есть еще пять доступных вариантов для создания некоторых более сложных функций, с помощью которых мы можем делать практически все, что захотим. Это:\MyKey{command}, \MyKey{numbercommand}, \MyKey{textcommand},\MyKey{deepnumbercommand} и \MyKey{deeptextcommand}. Начнем с объяснения первых трех:

\startitemize

  \item {\tt\bf command} указывает команду, которая принимает два аргумента: номер и заголовок раздела. Это может быть обычная команда \ConTeXt\ или команда, которую мы определили сами.

  \item {\tt\bf numbercommand} похожа на \MyKey{command}, но эта команда принимает только аргумент с номером раздела.



  \item {\tt\bf textcommand} также похожа на \MyKey{command}, но принимает только аргумент с текстом заголовка.
 
\stopitemize

Эти три варианта позволяют нам делать практически все, что мы хотим. Например, если я хочу, чтобы разделы были выровнены по правому краю, заключены в рамку и с разрывом строки между номером и текстом, я могу просто создать команду, которая сделает это, а затем указать эту команду как значение параметра \MyKey{command} команда. Это будет достигнуто с помощью следующих строк:

\vbox{\starttyping
\define[2]\AlignSection
  {\framed[frame=on, width=broad,align=flushright]{#1\\#2}}

\setuphead
  [section]
  [command=\AlignSection]
\stoptyping}

Когда мы одновременно устанавливаем параметры \MyKey{command} и \MyKey{style}, команда применяется к заголовку с его стилем. Это означает, например, что если мы установили \MyKey{textstyle=\backslash em} и \MyKey{textcommand=\backslash WORD}, \tex{WORD} (которая использует заглавные буквы в тексте, который принимает в качестве аргумента) будет применена к заголовку с его style, то есть: \cmd{WORD\{\backslash em Title text\}}. Если мы хотим, чтобы это было сделано наоборот, то есть чтобы стиль применялся к содержимому заголовка после применения команды, мы должны использовать вместо параметры  \MyKey{textcommand} and \MyKey{numbercommand}, параметры  \MyKey{deeptextcommand} and \MyKey{deepnumbercommand}. Это, в приведенном выше примере, сгенерирует \MyKey{\color[darkmagenta]{\{\backslash em\backslash WORD\{Title text\}\}}}.

В большинстве случаев не было бы никакой разницы в том, чтобы сделать это так или иначе. Но в некоторых случаях разица может быть.

\stopsubsection

\startsubsection
  [title=Расположение номера и текста заголовка]

Опция  \MyKey{alternative} управляет двумя вещами одновременно: расположением нумерации по отношению к тексту заголовка и расположением самого заголовка (включая номер и текст) по отношению к странице, на которой он отображается, и содержимому раздел. Это две разные вещи, но, поскольку обе они управляются одним и тем же параметром, они управляются одновременно.

Расположение заголовка по отношению к странице и первому абзацу содержания раздела определяется следующими возможными значениями \MyKey{alternative}:

\startitemize

  \item {\tt\bf text:}  заголовок раздела объединен с первым абзацем его содержания. Эффект аналогичен тому, который создается в \LATEX с помощью  \tex{paragraph} и \tex{subparagraph}.

The section title is integrated with the first
  paragraph of its contents. The effect is similar to what is produced
  in \LaTeX\ with \tex{paragraph} and \tex{subparagraph}.

  \item {\tt\bf paragraph:} заголовок раздела будет независимым абзацем.

  \item {\tt\bf normal:} заголовок раздела будет помещен на место по умолчанию, предоставленное \ConTeXt\ для конкретного типа рассматриваемого раздела. Обычно это \MyKey{paragraph}.


  \item {\tt\bf middle:} заголовок написан как отдельный абзац по центру. Если это нумерованная команда, номер и текст разделены на разных строках по центру.

Эффект, аналогичный тому, что достигается с помощью  \MyKey{alternative=middle}, достигается с помощью параметра \MyKey{align}, который управляет выравниванием заголовка. Может принимать значения \MyKey{left}, \MyKey{middle} или \MyKey{flushright}. Но если мы центрируем заголовок с помощью этой опции, номер и текст появятся в одной строке.

  \item {\tt\bf margintext:} при выборе этого параметра весь заголовок (нумерация и текст) печатается в пространстве, зарезервированном для поля.

\stopitemize

Расположение номера по отношению к тексту заголовка обозначается следующими возможными значениями \MyKey{alternative}:

\startitemize

  \item {\tt\bf margin/inmargin:} заголовок - это отдельный абзац. Нумерация пишется в отведенном для поля месте. Я не понял разницы между использованием \MyKey{margin} и \MyKey{inmargin}.

  \item {\tt\bf reverse:} обратный: заголовок составляет отдельный абзац, но нормальный порядок меняется на обратный, и сначала печатается текст, а затем номер.

  \item {\tt\bf top/bottom:} в заголовках, текст которых занимает более одной строки, эти два параметра определяют, будет ли нумерация выровнена с первой строкой заголовка или с последней строкой соответственно.

\stopitemize

\stopsubsection

\startsubsection
  [title=Команды или действия, которые необходимо выполнить до или после печати заголовка]

Можно указать одну или несколько команд, которые выполняются перед печатью заголовка (параметры \MyKey{before}) или после (параметр \MyKey{after}). Эти параметры широко используются для визуального обозначения заголовка. Например: если мы хотим добавить больше вертикального промежутка между заголовком и текстом, который ему предшествует, \MyKey{before=\backslash blank} добавит пустую строку. Чтобы добавить еще больше места, мы могли бы написать \MyKey{before=\{\backslash blank[3*big]\}}. В этом случае мы заключили значение параметра в фигурные скобки, чтобы избежать ошибки. Мы также могли бы визуально указать расстояние между предыдущим текстом и следующим текстом с помощью \MyKey{before=backslash hairline, after=\backslash hairline}, который будет рисовать горизонтальную линию до и после заголовка.

Параметры \MyKey{before} и \MyKey{after}  очень похожи на параметры \MyKey{commandbefore} и \Conjecture \MyKey{commandafter}. В соответствии с моими тестами я пришел к выводу, что разница в том, что первые два выполняют действия до и после начала набора заголовка как такового, в то время как последние два относятся к командам, которые будут выполняться до и после набора {\em текста заголовка}.

Если мы хотим вставить разрыв страницы перед заголовком, мы должны использовать параметр \MyKey{page}, который позволяет, среди других значений, «yes» для вставки разрыва страницы, «left», чтобы вставить столько разрывов страницы, сколько необходимо, чтобы гарантировать чтобы заголовок начинался на четной странице, «right», чтобы гарантировать, что заголовок начинается на нечетной странице, или «no», если мы хотим отключить принудительный разрыв страницы. Эта опция, с другой стороны, для уровней ниже \MyKey{chapter} будет работать, только если используется \MyKey{continue=no}, в противном случае она не будет работать, если раздел, подраздел или команда находятся на первой странице главы.

\startSmallPrint

По умолчанию главы начинаются на новой странице в \ConTeXt\. Если установлено, что разделы также начинают новую страницу, возникает проблема, что делать с первым разделом главы, который, возможно, находится в начале главы: если этот раздел также начинает разрыв страницы, мы заканчиваем вверх со страницей, которая открывает главу, содержащую только название главы, что не очень эстетично. Вот почему мы можем установить опцию \MyKey{continue}, имя, я должен сказать, что мне не очень понятно: если \MyKey{continue=yes}, разрыв страницы не будет применяться к разделам, которые находятся на первой странице. главы. Если \MyKey{continue=no}, разрыв страницы все равно будет применяться.

\stopSmallPrint

Если вместо секционных команд мы используем среды раздела (\cmd{start ...  \backslash stop}), у нас также есть опция \MyKey{insidesection}, с помощью которой мы можем указать одну или несколько команд, которые будут выполнены после того, как заголовок будет набран, и мы уже находимся внутри раздела. Эта опция позволит нам, например, убедиться, что сразу после начала главы оглавление будет автоматически набираться с помощью (\MyKey{insidesection=\backslash placecontent})

\stopsubsection

\startsubsection
  [title=Другие настраиваемые функции]

Помимо уже знакомых, с помощью \tex{setuphead} мы можем настроить следующие дополнительные функции:

\startitemize

  \item {\bf Interlined}. Управляется «межстрочным пространством», которое принимает в качестве значения имя межстрочной команды, ранее созданной с помощью \tex{defineinterlinespace} и настроенной с помощью \tex{setupinterlinespace}.

  \item {\bf Alignment}. Параметр  \MyKey{align} влияет на выравнивание абзаца, содержащего заголовок. Среди прочего, он может иметь следующие значения: \MyKey{flushleft} (слева), \MyKey{flushright} (справа), \MyKey{middle} (по центру), \MyKey{inner} (внутреннее поле) и \MyKey{outer} (внешнее поле).

  \item {\bf Margin}. С помощью опции \MyKey{margin} мы можем вручную установить поле заголовка. 

  \item {\bf Indenting the first paragraph}. Отступ первого абзаца. Значение параметра  \MyKey{indentnext}  (может быть «да», «нет» или «авто») определяет, будет ли первая строка первого абзаца раздела иметь отступ. Должен ли он быть с отступом (в документе, где первая строка абзацев обычно имеет отступ) - дело вкуса.

  \item {\bf Width}. По умолчанию заголовки занимают необходимую им ширину, если только она не превышает ширину строки. В этом случае заголовок займет более одной строки. Но с помощью опции  \MyKey{width} мы можем назначить определенную ширину для заголовка. Параметры  \MyKey{numberwidth} и \MyKey{textwidth}  соответственно определяют ширину нумерации или ширину текста заголовка.

  \item {\bf Отделение цифры и текста}. Параметры \MyKey{distance} и \MyKey{textdistance} позволяют нам контролировать расстояние, отделяющее число от его текста.

  \item Стиль верхних и нижних колонтитулов разделов. Для этого мы используем параметры \MyKey{header}  и \MyKey{footer}.

\stopitemize

\stopsubsection

\startsubsection
  [title=Другие параметры \tex{setuphead} options]

С помощью опций, которые мы уже видели, мы можем видеть, что возможности настройки названий разделов практически неограниченны. Однако в \tex{setuphead} есть около тридцати опций, о которых я не \Doubt упоминал. Большинство из них потому, что я не понял, для чего они предназначены или как они используются, некоторые потому, что их объяснение заставило бы меня углубиться в аспекты, которые я не намерен рассматривать в этом введении.


\stopsubsection

\stopsection

\startsection
  [
    reference=sec:definehead,
    title=Определение новых команд раздела,
  ]
\PlaceMacro{definehead}

Мы можем определить наши собственные команды раздела с помощью \tex{definehead}, синтаксис которого:

\type{\definehead[CommandName][Model][Configuration]}

где

\startitemize

  \item {\bf CommandName} представляет имя, которое будет иметь новая команда раздела.

  \item {\bf Model} это имя существующей команды раздела, которая будет использоваться в качестве модели, от которой новая команда изначально унаследует все свои характеристики.

  \startSmallPrint

     Фактически, новая команда наследует от модели гораздо больше, чем ее начальные характеристики: она становится своего рода настраиваемым экземпляром модели, но совместно с ней, например, внутренний счетчик, контролирующий нумерацию.

  \stopSmallPrint

  \item {\bf Configuration}  это индивидуальная конфигурация нашей новой команды. Здесь мы можем использовать те же параметры, что и в \tex{setuphead}.

\stopitemize

Нет необходимости настраивать новую команду во время ее создания. Это можно сделать позже с помощью \tex{setuphead} и, фактически, в примерах, приведенных в руководствах \ConTeXt\ и его вики, это кажется нормальным способом.

\stopsection

\startsection
  [
    reference=sec:macrostructure,
    title=Макроструктура документа,
  ]

Главы, разделы, подразделы, заголовки ..., структурируют документ; они это организуют. Но вместе со структурой, проистекающей из таких команд, в некоторых печатных книгах, особенно в книгах из академического мира, существует своего рода {\em макроупорядочение} материала книги, принимая во внимание не его содержание, а функция, которую выполняет каждая из этих больших частей в книге. Вот как мы различаем:

\startitemize

  \item Начальная часть документа, содержащая титульную страницу, страницу подтверждения, страницу посвящения, оглавление, возможно, предисловие, страницу презентации и т.д.

  \item Основная часть документа, содержащая основной текст документа, разделенный на части, главы, разделы, подразделы и т. Д. Эта часть обычно является самой обширной и важной.

  \item Дополнительный материал, состоящий из дополнений или приложений, которые развивают или иллюстрируют некоторые проблемы, рассматриваемые в основной части, или предоставляют дополнительную документацию, написанную не автором основной части, и т.д.

  \item Заключительная часть документа, где мы можем найти библиографию, указатели, глоссарии и т.д.

\stopitemize

В исходном файле мы можем разграничить каждую из этих частей через среды, показанные в \in{table}[tbl:macrostructure].

{\switchtobodyfont[small]
\placetable
  [here]
  [tbl:macrostructure]
  {Environments that reflect the document's macrostructure}
{\starttabulate[|l|l|]
\HL
\NC {\bf Part of the document}
\NC {\bf Command}
\NR
\HL
\NC Initial part
\NC\backslash startfrontmatter [Options] ... \backslash stopfrontmatter
\NR\PlaceMacro{startfrontmatter}
\NC Main body
\NC\backslash startbodymatter [Options] ... \backslash stopbodymatter
\NR\PlaceMacro{startbodymatter}
\NC Appendices
\NC\backslash startappendices \ [Options] ... \backslash stopappendices
\NR\PlaceMacro{startappendices}
\NC Final part
\NC\backslash startbackmatter [Options] ... \backslash stopbackmatter\PlaceMacro{startbackmatter}
\NR
\HL
\stoptabulate
}}

Четыре среды позволяют использовать те же четыре параметра: \MyKey{page}, \MyKey{before}, \MyKey{after} и \MyKey{number}, и их значения и полезность такие же, как и в \tex{setuphead}. (см. \in{section} [sec:setuphead]), хотя мы должны отметить, что здесь параметр \MyKey{number = no} устраняет нумерацию всех команд секционирования в среде.

Включение любого из этих больших разделов в наш документ имеет смысл только в том случае, если необходимо провести какое-то различие между ними. Возможно, заголовки или нумерация страниц frontmatter. Конфигурация каждого из этих блоков достигается

\PlaceMacro{setupsectionblock}\tex{setupsectionblock} , синтаксис которого:

\type{\setupsectionblock [Block name] [Options]}


где{\em Block name} может быть {\tt frontpart}, {\tt bodypart}, {\tt appendix} или {\tt backpart}, а параметры могут быть такими же, как только что упомянутые: \MyKey{page},\MyKey{number}, \MyKey{before} и \MyKey{after}. Так, например, чтобы гарантировать, что в {\em frontmatter} страницы пронумерованы римскими числами, в преамбуле нашего документа мы должны написать:

\starttyping
\setupsectionblock
  [frontpart]
  [
    before={\setuppagenumbering[conversion=Romannumerals]}
  ]
\stoptyping

Конфигурация \ConTeXt\ по умолчанию для этих четырех блоков подразумевает, что:

\startitemize

  \item Четыре блока начинают новую страницу.

  \item Нумерация разделов изменяется в каждом из этих блоков:

  \startitemize

    \item По умолчанию в {\tt frontmatter} and {\tt backmatter} все нумерованные разделы не пронумерованы.

    \item В {\tt bodymatter}  главы имеют арабскую нумерацию.

    \item В {\tt appendices} главы нумеруются прописными буквами.

  \stopitemize

\stopitemize

Также можно создавать новые блоки разделов с помощью

\PlaceMacro{definesectionblock}\tex{definesectionblock}.

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% coding: utf-8-unix
%%% TeX-master: "../introCTX.mkiv"
%%% End:
%%% vim:set filetype=context tw=72 : %%%