%%% File:      b08_Lists.mkiv
%%% Author:    Joaquín Ataz-López
%%% Begun:     July 2020
%%% Concluded: July 2020
%%% Contents:  Initially this chapter was to be part of Chapter 12
%              (elements and structures of documents). But I saw that on
%              the one hand indexes affected the document globally, and on
%              the other hand, if I included this in Chapter 12, it would
%              become disproprotionately long. The chapter was written in
%              record time (three or four days), a sign that I was already
%              beginning to get a more intimate understanding of ConTeXt.
%
%%% Edited with: Emacs + AuTeX - And at times vim + context-plugin
%%%

\environment ../introCTX_env.mkiv

\startcomponent b08_Lists.mkiv

\startchapter
  [
    reference=cap:toc,
    title={Оглавление, указатели, списки},
    bookmark={Table of contents, indexes, lists},
  ]

\TocChap

Оглавление и указатель - это глобальный аспект документа. Почти все документы будут иметь оглавление, в то время как только некоторые документы будут иметь указатель. Для многих языков (но не для английского) и оглавление, и указатель подпадают под общий термин «указатель». Для англоязычных читателей оглавление обычно находится в начале (документа или, возможно, в некоторых случаях также и в начале глав), а указатель - в конце.

Любой из них подразумевает конкретное применение механизма внутренних ссылок, объяснение которого включено в раздел \in{section}[sec:references].

\startsection
  [
    reference=sec:content,
    title=Содержание,
  ]

\startsubsection
  [title=Общий вид содержания]

В предыдущей главе мы рассмотрели команды, позволяющие установить структуру документа в том виде, в котором он был написан. В этом разделе основное внимание уделяется оглавлению и индексу, которые в некотором роде отражают структуру документа. Оглавление очень полезно для получения представления о документе в целом (оно помогает контекстуализировать информацию) и для поиска точной точки, где может быть расположен конкретный отрывок. Книги с очень сложной структурой, с множеством разделов и подразделов с разной степенью глубины, похоже, требуют иного типа оглавления, поскольку плохо детализированное (возможно, только с первыми двумя или тремя уровнями разбиения на разделы) очень помогает получить общее представление о содержании документа, но не очень полезен для определения местоположения конкретного отрывка; с другой стороны, в отличие от очень подробного оглавления, где легко пропустить лес за деревьями и потерять общий вид документа. Вот почему иногда книги с особенно сложной структурой включают более одного оглавления: одно не слишком подробное в начале, показывающее основные части, и более подробное оглавление в начале каждой главы, а также, возможно, индекс в конце.

Все они могут быть относительно легко сгенерированы \ConTeXt\ автоматически. Мы можем:

\startitemize

  \item Создавать полное или частичное оглавление в любом месте документа.

  \item Определиться с содержанием любого из них.

  \item Настроить их внешний вид до мельчайших деталей.

  \item Включить в оглавление гиперссылки, которые позволят нам перейти непосредственно к нужному разделу.

\stopitemize

Фактически, эта последняя утилита включена по умолчанию во все оглавления при условии, что в документе включена функция интерактивности. См. По этому поводу раздел \in{section}[sec:interactivity]

Объяснение этого в справочном руководстве \ConTeXt\, на мой взгляд, несколько сбивает с толку, что, я думаю, связано с тем, что сразу вводится слишком много информации. Механизм построения оглавлений \ConTeXt\ состоит из множества частей; и тексту, который пытается объяснить их все сразу, трудно быть ясным, особенно для читателя, который плохо знаком с этой  темой. Напротив, объяснение в вики \goto{wiki}[(https://wiki.contextgarden.net/Table_of_Contents#Page_numbering_in_ToC)] практически ограничено примерами: очень полезно для изучения приемов, но неадекватно - я думаю - для понимания механизма и того, как он работает. Вот почему стратегия, которую я решил использовать для объяснения вещей в этом введении, начинается с предположения о том, что не строго верно (или не совсем верно): что в \ConTeXt\ есть что-то, называемое {\em оглавлением}. Начиная с этого, объясняются обычные команды для создания оглавления, и, когда эти команды и их конфигурация хорошо известны, я думаю, что настал момент представить - хотя и на теоретическом, а не на более практическом уровне - информацию о тех частях механизма, которые до этого были опущены. Знание этих дополнительных частей позволяет нам создавать гораздо более настраиваемые оглавления, чем те, которые мы можем назвать обычными, созданными с помощью команд, объясненных до этого момента; однако в большинстве случаев этого делать не нужно.

\stopsubsection

\startsubsection
  [
    reference=sec:completecontent,
    title=Полностью автоматическое оглавление с заголовком,
  ]

Основные команды для создания автоматически сгенерированного оглавления (TOC) из пронумерованных разделов документа (части, главы, раздела и т. Д.) - это \PlaceMacro{completecontent}\tex{completecontent} и \PlaceMacro{placecontent}\tex{placecontent}. Основное различие между двумя командами состоит в том, что первая добавляет заголовок к оглавлению; для этого непосредственно перед оглавлением вставляется ненумерованная глава, название которой по умолчанию - «Оглавление».

Следовательно \tex{completecontent}:

\startitemize

  \item Вставляет в место нахождения новую ненумерованную главу, озаглавленную «Содержание».

    \startSmallPrint

Напомним, что в \ConTeXt\ для создания ненумерованного раздела на том же уровне, что и главы, используется команда \tex{title} (see \in{section}[sec:sectiontypes]). Поэтому на самом деле \tex{completecontent} вставляет не главу {\em Chapter} (\tex{chapter}) а заголовок {\em Title} (\tex{title}). Я не сказал этого, потому что думаю, что читателя может сбить с толку использование здесь имен ненумерованных команд раздела, поскольку термин {\em Title} также имеет более широкий смысл, и читателю легко не отождествить его с конкретным уровнем секционирования, о котором мы говорим.


  \stopSmallPrint

  \item Эта {\em глава} (на самом деле \tex{title}) отформатирована точно так же, как и остальные ненумерованные главы в документе; который по умолчанию включает разрыв страницы.

  \item Оглавление печатается сразу после заголовка.

\stopitemize

Первоначально сгенерированное оглавление {em полное}, о чем мы можем сделать вывод из имени команды, которая его генерирует (\tex{\completecontent}). Но, с одной стороны, мы можем ограничить уровень глубины оглавления, как описано в разделе \in{section}[sec:placecontent], а с другой, поскольку эта команда {em чувствительна} к тому месту, где она находится в исходном файле (см. То, что сказано далее о \tex{placecontent}), если \tex{completecontent} не найдено в начале документа, возможно, что созданное оглавление не является полным; и в некоторых местах исходного файла возможно даже игнорирование команды. Если это произойдет, решение состоит в том, чтобы вызвать команду с параметром \MyKey{criterium=all}.
Относительно этой опции см.  также \in{section}[sec:placecontent].

Чтобы изменить наименование заголовка по умолчанию, присвоенного оглавлению, мы используем команду \PlaceMacro{setupheadtext}\tex{setupheadtext}, синтаксис которой:

  \type{\setupheadtext[Language][Element=Name]}

где {\em Language} является необязательным и относится к идентификатору языка, используемому \ConTeXt\ (\in{section}[sec:langdoc]), а {\em Element} относится к элементу, имя которого мы хотим изменить ((\MyKey{content} в случае таблицы содержания), а {\em Name} - это имя или название, которое мы хотим дать нашему оглавлению. Например

  \type{\setupheadtext[en][content=Оглавление]}

гарантирует, что содержание, созданное с помощью \tex{completecontent}, будет наименоваться «Оглавление» вместо «Content».

Более того, \tex{completecontent} допускает те же параметры конфигурации, что и \tex{placecontent}, для объяснения которых я обращаюсь к (следующему разделу).

\stopsubsection

\startsubsection
  [
    reference=sec:placecontent,
    title=Автоматическое оглавление без заголовка,
  ]

Общая команда для вставки оглавления без заголовка, автоматически сгенерированная из команд секционирования документа, - это \tex{placecontent}, синтаксис которой:

\type{\placecontent [Options]}

В принципе, таблица содержания будет содержать абсолютно все пронумерованные разделы, хотя мы можем ограничить его глубину с помощью команды \PlaceMacro{setupcombinedlist}\tex{setupcombinedlist} (о которой мы поговорим далее). Так, например:

\type{\setupcombinedlist[content][list={chapter,section}]}

ограничит состав оглавления главами и разделами.

Особенностью этой команды является то, что она чувствительна к своему местоположению в исходном файле. Это очень легко объяснить с помощью нескольких примеров, но гораздо сложнее, если мы хотим точно указать, как работает команда и какие заголовки включаются в оглавление в каждом случае. Итак, начнем с примеров:

\startitemize

  \item \tex{placecontent}  помещенный в начало документа, перед первой командой раздела (часть, глава или раздел, в зависимости от ситуации) сгенерирует полное оглавление.

  \startSmallPrint

Я не совсем уверен, что оглавление, сгенерированное по умолчанию, является {\em полным}, я считаю, что оно включает достаточное количество уровней секционирования, чтобы быть полным в большинстве случаев; но я подозреваю, что дальше восьмого уровня секционирования он не пойдет. В любом случае, как упоминалось выше, мы можем отрегулировать уровень секционирования, которого достигает TOC, с помощью

    \type{\setupcombinedlist[content][list={chapter, section, subsection, ...}]}

  \stopSmallPrint

  \item  Напротив, та же самая команда, расположенная внутри части, главы или раздела, будет исключительно генерировать оглавление содержимого этого элемента или, другими словами, глав, разделов и других более низких уровней разделения определенной части или разделов (и других уровни) определенной главы или подразделов определенного раздела.

\stopitemize

Что касается технического и подробного объяснения, чтобы правильно понять работу \tex{placecontent} по умолчанию, важно помнить, что различные разделы на самом деле являются {\em средами} для \ConTeXt\ Mark~IV, которые начинаются с \tex{startSectionType} и заканчиваются \tex{stopSectionType} и может содержаться в других командах раздела нижнего уровня. Итак, принимая это во внимание, мы можем сказать, что \tex{placecontent} по умолчанию генерирует оглавление, которое будет включать только:

\startitemize

  \item Элементы, принадлежащие к {\em среде} (уровень раздела), в которой размещена команда. Это означает, что команда, помещенная в главу, не будет включать разделы или подразделы из других глав.

  \item Элементы, у которых уровень секционирования ниже уровня, соответствующего точке, где расположена команда. Это означает, что если команда находится в главе, будут включены только разделы, подразделы и другие более низкие уровни; но если команда находится в разделе, она будет разделена, чтобы сделать оглавление уровня подраздела.

\stopitemize

Кроме того, для создания оглавления требуется, чтобы \tex{placecontent} находился  {\em перед} первым разделом главы, в которой оно находится, или перед первым подразделом раздела, в котором оно находится, и т.д.

\startSmallPrint

Я не уверен, что ясно объяснил вышесказанное. Возможно, с несколько более подробным примером, чем предыдущие, мы сможем лучше понять, что я имею в виду: давайте представим следующую структуру документа:

\vbox{ \startitemize[packed]

  \item Chapter 1

    \startitemize[packed]

    \item Section 1.1

    \item Section 1.2

      \startitemize[packed]

      \item Subsection 1.2.1

      \item Subsection 1.2.2

      \item Subsection 1.2.3

      \stopitemize

    \item Section 1.3

    \item Section 1.4

    \stopitemize

  \item Chapter 2

  \stopitemize}

Итак: \tex{placecontent}, помещенный перед главой 1, сгенерирует полное оглавление, подобное тому, которое сгенерировано \tex{completecontent}, но без заголовка. Но если команда размещена в главе 1 и перед разделом 1.1, оглавление будет только главы; и если он находится в начале раздела 1.2, оглавление будет только содержимым этого раздела. Но если команда будет размещена, например, между разделами 1.1 и 1.2, она будет проигнорирована. Она также будет проигнорирована, если будет размещена в конце раздела или в конце документа.

\stopSmallPrint

Все это, конечно, относится только к случаю, когда команда не включает параметры. В частности, опция {\tt criterium} изменит это поведение по умолчанию.

Из вариантов, разрешенных \tex{placecontent} , я объясню только два из них, наиболее важные для настройки оглавления и, более того, единственные, которые (частично) задокументированы в справочном руководстве \ConTeXt\. Параметр {\tt criterium}, который влияет на содержимое оглавления по отношению к месту в исходном файле, где расположена команда; и параметр {\tt alternative}, который влияет на общий макет создаваемого оглавления.

\stopsubsection

\startsubsection
  [
    reference=sec:criteriumlist,
    title={Элементы для включения в ТОС: параметр {\tt criterium}},
  ]

Операция по умолчанию \tex{placecontent} по отношению к позиции команды в исходном файле была объяснена выше. Опция {\tt criterium} изменяет эту
операцию. Среди прочего, она может принимать следующие значения:

\startitemize

  \item {\tt all}: оглавление будет полным, независимо от места в исходном файле, где находится команда.

  \item {\tt previous}: оглавление будет включать только команды раздела (уровня, на котором мы находимся) {\em previous} до \tex{placecontent}. Эта опция предназначена для оглавлений, которые написаны в конце рассматриваемого документа или раздела.

  \item {\tt part, chapter, section, subsection...}: подразумевает, что оглавление должно быть ограничено указанным уровнем разделения.

  \item {\tt component}: в многофайловых проектах (см. \in{section}[sec-projects]) будет генерировать только оглавление, соответствующее {\em компоненту}, в котором найдена команда tex{placecontent} или \tex{completecontent}.

\stopitemize

\stopsubsection

\startsubsection
  [
    reference=sec:alternativelist,
    title={Макет оглавления: альтернативный вариант: опция {\tt alternative}},
  ]

Опция  {\tt alternative} управляет общей компоновкой оглавления. Её основные значения можно увидеть в \in{table}[tbl:contentalternatives].

\placetable
  [here]
  [tbl:contentalternatives]
  {\tfx Способы форматирования оглавления}
{\switchtobodyfont[small]
\starttabulate[|c|l|l|]
\HL
\NC {\bf alternative}
\NC {\bf Содержание записей TOC}
\NC {\bf Примечания}
\NR
\HL
\NC a
\NC Number -- Title -- Page
\NC One line per entry
\NR
\NC b
\NC Number -- Title -- Spaces -- Page
\NC One line per entry
\NR
\NC c
\NC Number -- Title -- Leader dots -- Page
\NC One line per entry
\NR
\NC d
\NC Number -- Title -- Page
\NC Continuous TOC
\NR
\NC e
\NC Title
\NC Framed
\NR
\NC f
\NC Title
\NC Выровнено по левому краю,
\NR
\NC\NC\NC по правому краю или по центру
\NR
\NC g
\NC Title
\NC По центру
\NR
\HL
\stoptabulate}

Первые четыре альтернативных значения предоставляют всю информацию о каждом разделе (его номер, заголовок и номер страницы, с которой он начинается), и поэтому подходят как для бумажных, так и для электронных документов. Последние три альтернативы только информируют нас о заголовке, поэтому они подходят только для электронных документов, где нет необходимости знать номер страницы, на которой начинается раздел, при условии, что оглавление включает гиперссылку на него, что по умолчанию происходит в \ConTeXt. .

Кроме того, я считаю, что для того, чтобы по-настоящему оценить различия между различными альтернативами, читателю лучше всего создать тестовый документ, в котором он или она может их подробно проанализировать.


\stopsubsection

\startsubsection
  [
    reference=sec:setuplist,
    title=Формат записей оглавления,
  ]
  \PlaceMacro{setuplist}

Мы видели, что опция {\tt alternative} \tex{placecontent} или \tex{completecontent} позволяет нам контролировать общий макет оглавления, то есть какая информация будет отображаться для каждого заголовка и будут ли разрывы строк, разделяющие разные заголовки. Окончательная корректировка каждой записи оглавления производится с помощью команды \tex{setuplist}, синтаксис которой следующий:

\type{\setuplist[Element][Configuration]}

где {\em Element} относится к определенному типу раздела. Это может быть часть, глава, раздел и т.д. Мы также можем настроить более одного элемента одновременно, разделив их запятыми. {\em Конфигурация} имеет до 54 возможностей, многие из которых, как обычно, явно не задокументированы; но это не мешает тем, которые задокументированы, или тем, которые недостаточно ясны, разрешить полную настройку TOC.

Теперь я объясню наиболее важные параметры, сгруппировав их в соответствии с их полезностью, но прежде чем переходить к ним, давайте вспомним, что запись оглавления, в зависимости от значения {\tt alternative}, может иметь до трех различных компонентов: номер раздела, заголовок раздела и номер страницы. Параметры конфигурации позволяют нам настраивать различные компоненты глобально или по отдельности:

\startitemize

  \item {\em Включение (или нет) различных компонентов}: если мы выбрали альтернативу, которая включает, помимо заголовка, номер раздела и номер страницы (варианты 'a' 'b' 'c' или 'd'), параметры  {\tt headnumber=no} или {\tt pagenumber=no}, это означает, что для конкретного уровня, который мы настраиваем, номер раздела ({\tt headnumber}) или номер страницы ({\tt pagenumber}) не отображается.

  \item {\em Цвет и стиль}: мы уже знаем, что запись, генерирующая определенный раздел в оглавлении, может иметь (в зависимости от альтернативы) до трех различных компонентов: номер раздела, заголовок и номер страницы. Мы можем совместно указать стиль и цвет для трех компонентов, используя параметры стиля {\tt style} и цвета {\tt color}, или сделать это индивидуально для каждого компонента с помощью {\tt numberstyle, textstyle} или {\tt pagestyle}  (для стиля) and {\tt numbercolor, textcolor} или {\tt pagecolor}  для цвета.

Чтобы управлять внешним видом каждой записи, помимо самого стиля, мы можем применить некоторую команду ко всей записи или к одному из ее различных элементов. Для этого есть параметры {\tt command}, {\tt numbercommand}, {\tt pagecommand} and {\tt textcommand}. Указанная здесь команда может быть стандартной командой \ConTeXt\ или командой, созданной нами самостоятельно. Номер раздела, текст заголовка и номер страницы будут переданы в качестве аргументов опции  {\tt command}, в то время как заголовок раздела будет передан в качестве аргумента в текстовую команду, а номер страницы - в {\tt pagecommand}. Так, например, следующее предложение гарантирует, что заголовки разделов будут написаны (ложными) маленькими заглавными буквами:

  \starttyping

    \setuplist[section][textcommand=\Cap]

  \stoptyping

  \item {\em Разделение других элементов оглавления}: параметры до {\tt before} и после {\tt after} позволяют нам указать команды, которые будут выполняться перед ({\tt before}) и после ({\tt after}) набора текста оглавления. Обычно эти команды используются для установки либо интервала, либо некоторого разделительного элемента между предыдущей и последующей записями.

  \item {\em Отступ элемента}: задается с помощью параметра {\tt margin}, который позволяет нам установить величину отступа слева, который будет иметь записи настраиваемого уровня.

  \item {\em Гиперссылки, встроенные в оглавление}: по умолчанию записи указателя включают гиперссылку на страницу документа, где начинается рассматриваемый раздел. Используя опцию взаимодействия, мы можем отключить эту функцию ({\tt interaction=no}) или ограничить часть записи индекса, где будет гиперссылка, которая может быть номером раздела ({\tt interaction=number} или  {\tt interaction=sectionnumber}), заголовком раздела ({\tt interaction=text} или {\tt interaction=title}) или номером страницы ({\tt interaction=page}  или  {\tt interaction=pagenumber}).

  \item {\em Прочие аспекты}:

  \startitemize

    \item {\tt width}: указывает расстояние между номером и заголовком раздела. Это может быть расстояние или ключевое слово, задающее точную ширину номера секции.

    \item {\tt symbol}: позволяет заменить номер раздела на {\em symbol}. Поддерживаются три возможных значения: {\tt один}, {\tt два} и {\tt три}. Значение {\tt none}  для этой опции удаляет номер раздела из TOC.

   \item {\tt numberalign}: указывает выравнивание элементов нумерации; он может быть left, right, middle, flushright, flushleft.

\stopitemize

\stopitemize

Среди множества вариантов конфигурации TOC нет ни одного, который позволяет нам напрямую управлять межстрочным интервалом. По умолчанию он будет применяться ко всему документу. Однако часто желательно, чтобы строки в оглавлении были немного более плотными, чем в остальной части документа. Для этого мы должны заключить команду, которая генерирует оглавление(\tex{placecontent} или \tex{completecontent}) внутри группы, в которой установлен другой межстрочный интервал. Например:

\starttyping
\start
  \setupinterlinespace[small]
  \placecontent
\stop
\stoptyping

\stopsubsection

\startsubsection
  [
    reference=sec:manual adjustments,
    title=Ручная корректировка таблицы содержания,
  ]

Мы уже объяснили две основные команды для создания оглавлений  (\tex{placecontent} и \tex{completecontent}), а также их параметры. С помощью этих двух команд автоматически создаются оглавления, состоящие из существующих пронумерованных разделов в документе или в блоке или сегменте документа, к которому относится оглавление. Теперь я объясню некоторые настройки {\em settings}, которые мы можем сделать, чтобы содержание оглавления не было таким автоматическим  {\em automatic}. Это подразумевает:

\startitemize

  \item Возможность также включения некоторых ненумерованных заголовков разделов в оглавление.

  \item Возможность вручную отправить в оглавление конкретную запись, которая не соответствует наличию пронумерованного раздела.

  \item Возможность исключения определенного пронумерованного раздела из TOC.

  \item Возможность того, что заголовок определенного раздела, отраженного в оглавлении, не совпадает в точности с заголовком, включенным в тело документа.


\stopitemize

\stopsubsection

\startsubsubsection
  [
    reference=sec:toc with unnumbered secs,
    title=Включение ненумерованных разделов в TOC,
  ]

Механизм, с помощью которого \ConTeXt\ создает оглавление, означает, что все пронумерованные разделы включаются автоматически, что, как я уже сказал (см. \in{section}[sec:title parts]), зависит от двух параметров  ({\tt number} and {\tt incrementnumber}) (число и число приращения), которые мы можем изменить с помощью\tex{setuphead} для каждого вида раздела. Там также объяснялось, что Там также объяснялось, что тип раздела, в котором {\tt incrementnumber=yes} и {\tt number=no}, будет иметь внутреннюю, но не внешнюю нумерацию.

Следовательно, если мы хотим, чтобы конкретный тип ненумерованного раздела - например, заголовок {\tt title} - был включен в оглавление, мы должны изменить значение параметра {\tt incrementnumber} для этого типа раздела, установив его на {\tt yes}, а затем включить этот тип раздела среди тех, которые будут отображаться в оглавлении, что, как объяснено выше, выполняется с помощью \tex{setupcombinedlist}:

\starttyping
  \setuphead
    [title]
    [incrementnumber=yes]

 \setupcombinedlist
   [content]
   [list={chapter, title, section, subsection, subsubsection}]
\stoptyping

Затем мы можем, если захотим, отформатировать эту запись с помощью \tex{setuplist} точно так же, как и любые другие; Например:

\type{\setuplist[title][style=bold]}

{\bf Примечание:} Только что описанная процедура будет включать в себя все экземпляры в нашем документе соответствующего ненумерованного типа раздела (в нашем примере разделы с типом заголовка).

{\bf Note:} Только что описанная процедура будет включать все экземпляры в нашем документе соответствующего ненумерованного типа раздела (в нашем примере разделы типа {\tt title}). Если мы хотим включить в оглавление только конкретное вхождение этого типа раздела, желательно сделать это с помощью процедуры, описанной ниже.

\stopsubsubsection

\startsubsubsection
  [
    reference=sec:manualtoc,
    title=Ручное добавление записей в оглавление,
  ]

Мы можем отправить либо запись (имитирующую существование раздела, который на самом деле не существует), либо команду в оглавление из любой точки исходного файла.

Чтобы отправить запись, имитирующую существование раздела, который на самом деле не существует, используйте \PlaceMacro{writetolist}\tex{writetolist}, синтаксис которого:

\type{\writetolist[SectionType][Options]{Number}{Text}}

в котором

\startitemize

  \item Первый аргумент указывает уровень, который эта запись раздела должна иметь в оглавлении: глава {\tt chapter}, раздел {\tt section}, подраздел {\tt subsection} и т.д.

   \item Второй аргумент, который является необязательным, позволяет настроить эту запись определенным образом. Если отправленный вручную ввод опущен, он будет отформатирован, как и все записи уровня, указанного в первом аргументе; хотя, я должен отметить, что в моих тестах мне не удалось заставить это работать.

  \startSmallPrint

Как в официальном списке команд \ConTeXt\ (см.  \in{section}[sec:qrc-setup-en]), так и в вики нам сообщают, что этот аргумент допускает \Doubt те же значения, что и \tex{setuplist}, который является командой, которая позволяет нам форматировать различные записи TOC. Но, я настаиваю, в моих тестах мне не удалось каким-либо образом изменить внешний вид записи оглавления, введенной вручную.

   \stopSmallPrint

  \item Третий аргумент должен отражать нумерацию элемента, введенного \Doubt  в оглавление, но я также не смог заставить это работать в моих тестах.

  \item Последний аргумент включает текст, который будет введен в оглавление.

\stopitemize

Это полезно, например, если мы хотим отправить конкретный ненумерованный раздел, но только его в оглавление. В \in{section}[sec:toc with unnumbered secs] объясняется, как получить целую категорию ненумерованных разделов для отправки в оглавление; но если мы хотим отправить ему только конкретное вхождение типа раздела, удобнее использовать команду \tex{writetolist}. Итак, например, если мы хотим, чтобы раздел нашего документа, содержащий библиографию, не был пронумерованным, но все же включался в оглавление, мы должны написать:

\starttyping
\subject{Bibliography}
\writetolist[section]{}{Bibliography}
\stoptyping

Посмотрите, как мы используем ненумерованную версию раздела {\tt section}, который является  {\tt subject}, для раздела, но мы отправляем его в индекс вручную, как если бы это был пронумерованный раздел ({\tt section}).

Другая команда, предназначенная для ручного воздействия на оглавление, - это \PlaceMacro{writebetweenlist}\tex{writebetweenlist}, которая используется для отправки не самой записи, а {\em команды} оглавлению из определенного места в документе. Например, если мы хотим включить строку между двумя элементами в оглавление, мы могли бы написать следующее в любом месте документа, расположенного между двумя соответствующими разделами:

\type{\writebetweenlist[section]{\hrule}}

\stopsubsubsection

\startsubsubsection
  [title={Исключить конкретный раздел из оглавления, принадлежащий к типу раздела, который включен в оглавление}]

Оглавление построено из {\em типов разделов}, установленных, как мы уже знаем, с помощью параметра {\tt list} команды \tex{setupcombinedlist}, поэтому, если определенный тип раздела должен появиться в оглавлении, нет способа исключить из него конкретный раздел, который для любых причины, по которым мы не хотим в ТОП.

Обычно, если мы не хотим, чтобы раздел отображался там, мы бы использовали его ненумерованное эквивалентное значение, например, {\tt title} вместо {\tt chapter}, {\tt subject} вместо {\tt section} и т.д. Эти разделы не отправляются в оглавление, и они не пронумерованы.

Однако, если по какой-либо причине мы хотим, чтобы определенный раздел был пронумерован, но не отображался в оглавлении, даже если это делают другие типы этого типа, мы можем использовать трюк {\em trick}, который состоит в создании нового типа раздела, который является клоном рассматриваемого раздела. Например:

\starttyping
\definehead[MySubsection][subsection]
\section{First section}
\subsection{First subsection}
\MySubsection{Second subsection}
\subsection{Third subsection}
\stoptyping

Это гарантирует, что при вставке типа раздела {\tt MySubsection} счетчик подразделов будет увеличиваться, поскольку этот раздел является {\em клоном} подразделов, но оглавление не будет изменено, поскольку по умолчанию он не включает типы {\tt MySubsection}.

\stopsubsubsection

\startsubsubsection
  [title={Текст заголовка раздела, который отличается по оглавлению от заголовка в теле документа}]

Если мы не хотим, чтобы заголовок определенного раздела, включенного в оглавление, был идентичен заголовку, отображаемому в теле документа, у нас есть две доступные нам процедуры:

\startitemize

  \item  Создание раздела не с традиционным синтаксисом  (\type{SectionType{Title}}), а с \tex{SectionType [Options]} или с \tex{startSectionType [Options]}, и назначьте текст, который мы хотим записать в оглавлении, параметру списка  {\tt list} (см. \in{section}[sec:sectionsyntax]).


  \item При написании заголовка рассматриваемого раздела в теле документа используйте команду \tex{nolist}: эта команда заставляет текст, который она принимает в качестве аргумента, заменяется в оглавлении многоточием. Например:

\starttyping
\chapter
  [title={An \nolist{approximate and slightly repetitive}
           introduction to the reality of the obvious}]
\stoptyping

будет набираться как заголовок главы в теле документа \quotation{An approximate and slightly repetitive introduction to the
  reality of the obvious}, но в оглавление будет отправлен следующий текст  \quotation{An ... introduction to the reality of the obvious}.

  \startSmallPrint

    {\bf Attention:} то, что я только что указал о команде \tex{nolist}, изложено как в справочном руководстве \ConTeXt\, так и в вики  \goto{wiki}[url(https://wiki.contextgarden.net/Command/nolist)]. Однако у меня это вызывает ошибку компиляции, сообщая мне, что команда \tex{nolist} не определена.

  \stopSmallPrint

\stopitemize

\stopsubsubsection

\stopsubsection

\stopsection

\startsection
  [
    reference=sec:lists,
    title={Списки, комбинированные списки и оглавление на основе списка},
  ]

Внутренне для \ConTeXt\ оглавление - это не что иное, как {\em комбинированный список}, который, в свою очередь, как следует из названия, состоит из комбинации простых списков. Следовательно, основное понятие, на основе которого ConTEXt строит оглавление, - это список. Несколько списков объединены в оглавление. По умолчанию \ConTeXt\ содержит предопределенный комбинированный список, называемый «контент», и это то, с чем до сих пор работали исследованные команды: \tex{placecontent} и \tex{completecontent}.

\startsubsection
  [title=Списки в \ConTeXt]

В \ConTeXt\  {\em список} - это диапазон пронумерованных элементов, о которых нам нужно помнить три вещи:

\startitemize[n]

  \item Число.

  \item Имя или заголовок.

  \item Страница, на которой он находится.

\stopitemize

Это происходит с пронумерованными разделами; но также и с другими элементами документа, такими как изображения, таблицы и т. д. Как правило, это те элементы, для которых есть команда, имя которой начинается с \tex{place} , которая помещает их как \tex{placetable}, \tex{placefigure} и т. д.

Во всех этих случаях \ConTeXt\ автоматически генерирует список, в котором указано время появления рассматриваемого элемента, его номер, заголовок и страница. Так, например, есть список глав, называемый {\tt chapter}, другой из разделов, называемый {\tt section}; но также и другую из таблиц (называемую {\tt table}) или изображений (называемую {\tt figure}). Списки, автоматически создаваемые ConTEXt, всегда называются так же, как и элементы, которые они хранят.

Список также будет автоматически сгенерирован, если мы создадим, например, новый тип пронумерованного раздела: когда мы создадим его, мы неявно создадим также список, в котором они хранятся. И если для ненумерованного раздела по умолчанию мы установим параметр {\tt incrementnumber=yes}, сделав его пронумерованным разделом, мы также неявно создадим список с этим именем.

Вместе с неявными списками (автоматически определяемыми \ConTeXt) мы можем создавать наши собственные списки с помощью \tex{definelist}, синтаксис которого

\PlaceMacro{definelist}\type{\definelist[ListName][Configuration]}

в список добавляются:

\startitemize

  \item  В списках, предопределенных \ConTeXt или созданных им в результате создания нового плавающего объекта (см. \in{section}[sec:definefloat]), автоматически каждый раз, когда элемент из списка вставляется в документ либо с помощью команды секционирования, либо с помощью \tex{placeWhatever}. Команда для других типов списков, например: \tex{placefigure}, вставит любое изображение в документ, но также вставит соответствующую запись в список.

  \item Вручную в любом виде списка с помощью \tex{Writetolist [ListName]}, уже объясненного в \in{subsction}[sec:manualtoc] of \in{section}sec:ручные настройки]. Также доступна команда \tex{writebetweenlist}. Это тоже было объяснено в этом разделе.

\stopitemize

После того, как список создан и все его элементы включены в него, с ним связаны три основные команды: \tex{setuplist}, \PlaceMacro{placelist}\tex{placelist} и \PlaceMacro{completelist}\tex{completelist}. Первый позволяет нам настроить внешний вид списка; последние два вставляют рассматриваемый список в то место документа, где он их находит. Разница между \tex{placelist} и \tex{completelist} аналогична разнице между \tex{placecontent} and \tex{completecontent} (см. \in{}[sec:completecontent] и \in{}[sec:placecontent]).

Так, например:

\type{\placelist[section]}

вставит список разделов, включая гиперссылки на них, если интерактивность документа включена и если в  \tex{setuplist} мы не установили {\tt interaction=no}. Список разделов не совсем то же самое, что оглавление, основанное на разделах: идея оглавления обычно включает также и более низкие уровни (подразделы, подподразделы и т.д.). Но список разделов будет включать только сами разделы.

Синтаксис этих команд:

\type{\placelist[ListName][Options]}

\type{\setuplist[ListName][Configuration]}

Параметры \tex{setuplist} уже были объяснены в \in{section}[sec:setuplist], а параметры для \tex{placelist} такие же, как для \tex{\placecontent} (см.\in{section}[sec:placecontent]).

\stopsubsection

\startsubsection
  [
    reference=sec:variouslists,
    title={Списки или указатели изображений, таблиц и других элементов},
  ]

Из того, что было сказано до сих пор, можно видеть, что, поскольку \ConTeXt\ автоматически создает список изображений, помещенных в документ с помощью команды \tex{placefigure}, создание списка или индекса изображений в определенной точке нашего документа так же просто, как при использовании команды \tex{placelist[figure]}. И если мы хотим сгенерировать список с заголовком (аналогично тому, что мы получаем с помощью \tex{completecontent}), мы можем сделать это с помощью \tex{\completetelist [figure]}. Мы можем сделать то же самое с другими четырьмя предопределенными типами плавающих объектов в \ConTeXt: таблицы (\MyKey{table}), графика (\MyKey{graphic}), {\em intermezzos}  ((\MyKey{intermezzo}) и химические формулы (\MyKey{chemical}), хотя для конкретных случаев из них \ConTeXt уже включает команду, которая генерирует их без заголовка: (\PlaceMacro{placelistoffigures}\tex{placelistoffigures},
\PlaceMacro{placelistoftables}\tex{placelistoftables},
\PlaceMacro{placelistofgraphics}\tex{placelistofgraphics},
\PlaceMacro{placelistofintermezzi}\tex{placelistofintermezzi} и
\PlaceMacro{placelistofchemicals}\tex{placelistofchemicals}), и еще одну, которая генерирует их с заголовком:
(\PlaceMacro{completelistoffigures}\tex{completelistoffigures},
\PlaceMacro{completelistoftables}\tex{completelistoftables},
\PlaceMacro{completelistofgraphics}\tex{completelistofgraphics},
\PlaceMacro{completelistofintermezzi}\tex{completelistofintermezzi} and
\PlaceMacro{completelistofchemicals}\tex{completelistofchemicals}), аналогично \tex{completecontent}

Таким же образом для плавающих объектов, которые мы сами создали (см. \in{section}[sec:definefloat]), будут автоматически созданы \tex{placelistof<FloatName>} и \tex{completelistof<FloatName>}.

Для списков, которые мы создали с помощью  \tex{definelist}, мы можем создать индекс с помощью \tex{placelist[ListName]}  или с помощью\tex{completelist[ListName]}.

\stopsubsection

\startsubsection
  [title=Комбинированные списки]

Комбинированный список, как следует из названия, представляет собой список, который объединяет элементы из различных ранее определенных списков. По умолчанию \ConTeXt\ определяет комбинированный список для таблиц содержимого с именем \MyKey{content}, но мы можем создавать другие комбинированные списки с помощью \PlaceMacro{definecombinedlist}\tex{definecombinedlist}, синтаксис которого:

\type{\definecombinedlist[Name][Lists][Options]}

где

\startitemize

  \item {\em Name}: это имя, которое будет иметь новый объединенный список.

  \item {\em Lists}: относится к именам списков, которые нужно объединить, через запятую.

  \item {\em Options}: параметры конфигурации для списка. Они могут быть указаны во время определения списка или, что предпочтительно, при вызове списка. Основные варианты (которые уже были объяснены) - это {\tt criterium} (\in{subsection}[sec:criteriumlist] of \in{section} [sec:placecontent]) and {\tt alternative} (в \in{subsection}[sec:alternativelist] in the same section).

\stopitemize

Побочный эффект создания объединенного списка с помощью \tex{definecombinedlist} заключается в том, что он также создает команду с именем\tex{placeListName}, которая служит для вызова списка, то есть для включения его в выходной файл. Так, например,

\type{definecombinedlist[TOC]}

создаст команду \tex{placeTOC}; а

\type{definecombinedlist[content]}

создаст команду \tex{placecontent}

Но подождите, \tex{placecontent}! Разве это не та команда, которая используется для создания {\em обычного} оглавления? В самом деле: это означает, что стандартное оглавление фактически создается \ConTeXt\ с помощью следующей команды:

\starttyping
\definecombinedlist
  [content]
  [part, chapter, section, subsection,
    subsubsection, subsubsubsection,
    subsubsubsubsection]
\stoptyping

Как только наш объединенный список определен, мы можем настроить его (или перенастроить) с помощью \tex{setupcombinedlist}, который позволяет использовать уже объясненный параметр {\tt criterium} (см. in{subsection}[sec:criteriumlist]) и параметр {\tt alternative} (см. \in{subsection}[sec:alternativelist] в том же разделе). ), а также опция {\tt list} для {\em изменения} списков, включенных в объединенный список.

\startSmallPrint

Официальный список команд \ConTeXt\ (см. \in{section}[sec:qrc-setup-en]) не упоминает параметр {\tt list} среди параметров, разрешенных для \tex{setupcombinedlist}, но он используется в нескольких примерах использования этой команды в вики (которая, к тому же, не упоминает об этом на странице, посвященной этой команде). Я также проверил, работает ли опция.

\stopSmallPrint

\stopsubsection

\stopsection

\startsection
  [title=Индекс (указатель)]

\startsubsection
  [title=Создание индекса]

Предметный указатель состоит из списка важных терминов, обычно расположенных в конце документа, с указанием страниц, на которых можно найти такую тему.

Когда книги набирались вручную, создание предметного указателя было сложной и утомительной задачей. Любое изменение нумерации страниц могло повлиять на все записи в указателе. Поэтому они были не очень распространены. Сегодня компьютерные механизмы набора текста означают, что, хотя задача, вероятно, и дальше будет утомительной, она уже не такая сложная, учитывая, что для компьютерной системы не так сложно поддерживать актуальный список данных, связанных с записями в указателе.

Для создания предметного указателя нам понадобятся:

\startitemize[n]

  \item Определите, какие слова, термины или понятия должны быть его частью. Это задача, которую может выполнить только автор.

  \item Проверьте, в каких точках документа появляется каждая запись в будущем указателе. Хотя, если быть точным, больше, чем {\em проверка} мест в исходном файле, где обсуждается концепция или проблема, то, что мы делаем, когда мы работаем с \ConTeXt\, - это разметка этих места, путем вставки команды, которая затем будет служить для автоматического создания индекса. Это утомительная часть.

  \item Наконец, мы генерируем и форматируем указатель, помещая его в нужное место в документе. Последнее довольно просто с \ConTeXt\ и требует только одной команды: \tex{placeindex}.

\stopitemize

\subsubsection{Предварительное определение записей в указателе и маркировка точек в исходном файле, которые ссылаются на них}

Фундаментальная работа приходится на второй этап. Верно, что компьютерные системы также способствуют этому в том смысле, что мы можем выполнить глобальный текстовый поиск, чтобы найти места в исходном файле, где рассматривается конкретная тема. Но мы также не должны слепо полагаться на такой текстовый поиск: хороший предметный указатель должен уметь обнаруживать каждое место, где обсуждается конкретный предмет, даже если это делается без использования {\em standard} термина для его обозначения.

Чтобы отметить {\em mark} фактическую точку в исходном файле, связав ее со словом, термином или идеей, которые появятся в индексе, мы используем команду \PlaceMacro{index}\tex{index}, синтаксис которой следующий:

\type{\index[Alphabetical]{Index entry}}

где {\em Alphabetical} - необязательный аргумент, который используется для указания текста, альтернативного тексту самой записи указателя, чтобы отсортировать её по алфавиту, а запись указателя {\em Index entry} -- это текст, который появится в указателе, связанный с этой меткой. Мы также можем применить функции форматирования, которые мы хотим использовать, и если в тексте появляются зарезервированные символы, они должны быть записаны обычным способом в \ConTeXt.

\startSmallPrint

Возможность расположить элемент указателя в алфавитном порядке иначе, чем он написан на самом деле, очень полезна. Подумайте, например, об этом документе, если я хочу создать запись в указателе для всех ссылок на команду \tex{\TeX}. Например, последовательность \type{\index{\backslash TeX}} перечислит команду не через "t" в "TeX", а среди символов, поскольку термин, отправленный в индекс, начинается с обратной косой черты. Это делается записью \type{\index[tex]{\backslash TeX}}.

\stopSmallPrint

Записи указателя {\em index entries} будут теми, которые нам нужны. Чтобы предметный указатель был действительно полезным, мы должны немного усерднее поработать, задавая вопрос, какие концепции читатель документа, скорее всего, будет искать; так, например, может быть лучше определить статью как «болезнь Ходжкина», чем определять ее как «болезнь Ходжкина», поскольку более всеобъемлющим термином является «болезнь».

\startSmallPrint

По соглашению записи в предметном указателе всегда пишутся строчными буквами, если они не являются собственными именами.

\stopSmallPrint

Если индекс имеет несколько уровней глубины (допускается до трех), чтобы связать конкретную запись индекса с определенным уровнем, используется символ «+». Следующее:

\starttyping
\index{Entry 1+Entry 2}
\index{Entry 1+Entry 2+Entry 3}
\stoptyping

В первом случае мы определили запись второго уровня под названием {\em Entry 2} , которая будет подстатьей {\em Entry 1}. Во втором случае мы определили запись третьего уровня под названием  {\em Entry 3}, которая будет подзаписью {\em Entry 2}, которая, в свою очередь, подзапись  {\em Entry 1}. Например

\vbox{
\starttyping
My \index{dog}dog, is a \index{dog+greyhound}greyhound called Rocket.
He does not like \index{cat+stray}stray cats.
\stoptyping}

Стоит отметить некоторые детали из вышеперечисленного:

\startitemize

  \item  Команда \tex{index}  обычно помещается {\em перед} словом, с которым она связана, и обычно не отделяется от него пробелом. Это необходимо для того, чтобы команда находилась на той же странице, что и слово, с которым она связана:

  \startitemize

      \item Если бы между ними был пробел, могла бы быть вероятность, что \ConTeXt\ выберет именно это пространство для разрыва строки, который также может оказаться разрывом страницы, и в этом случае команда будет на одной странице, а слово это связано с находящемся на следующей странице.



    \item Если бы команда следовала после {\em после}  слова, это слово могло бы быть разбито по слогам и разрыв строки между двумя его слогами был бы также разрывом страницы, и в этом случае команда указывала бы на следующую страницу, начинающуюся со слова, на которое она указывает.

  \stopitemize

  \item Посмотрите, как термины второго уровня вводятся во втором и третьем появлениях команды.

  \item Также проверьте, как при третьем использовании команды \tex{index}, хотя слово, которое появляется в тексте, является «кошки», термин, который будет отправлен в указатель, будет «кошка».

  \item Наконец: посмотрите, как три записи предметного указателя были написаны всего в две строки. Я сказал ранее, что отмечать точные места в исходном файле утомительно. Теперь я добавлю, что слишком большое их количество контрпродуктивно. Слишком обширный указатель ни в коем случае не предпочтительнее более краткого, в котором вся информация актуальна. Вот почему я сказал ранее, что решение о том, какие слова будут входить в указатель, должно быть результатом сознательного решения автора.

\stopitemize

Если мы хотим, чтобы наш индекс был действительно полезным, термины, используемые в качестве синонимов, должны быть сгруппированы в индексе под одним заголовком. Но поскольку читатель может искать информацию в индексе по любому из других терминов заголовка, обычно индекс содержит записи, которые ссылаются на другие записи. Например, предметный указатель руководства по гражданскому праву с таким же успехом может быть чем-то вроде

\startframedtext[frame=off]

  недействительность договора\\
  \qquad видит {\em недействительность}.

\stopframedtext

Мы достигаем этого не с помощью команды \tex{index}, а с помощью \PlaceMacro{seeindex}\tex{seeindex}, формат которой:

\type{\seeindex [Alphabetical] {Entry1} {Entry2}}

где {\em Entry1} - это запись индекса, которая будет ссылаться на другую; и {\em Entry2} - это реферетная цель. В нашем предыдущем примере нам нужно было бы написать:

\starttyping
\seeindex{недействительность договора\}{недействительность}
\stoptyping

В \tex{seeindex} мы также можем использовать знак  \quote{+} для обозначения подуровней для любого из двух его аргументов в квадратных скобках.

\subsubsection{Создание окончательного индекса}

Как только мы отметили все записи для индекса в нашем исходном файле, фактическая генерация индекса выполняется с помощью команд \\PlaceMacro{placeindex}\tex{placeindex} или \PlaceMacro{completindex}\tex{completindex} commands. Эти две команды сканируют исходный файл на наличие команд \tex{index} и генерируют список всех записей, которые должны быть в индексе, связывая термин с номером страницы, соответствующим месту, где он нашел команду \tex{index}. Затем они упорядочивают список терминов в алфавитном порядке, которые появляются в индексе, и объединяют случаи, когда один и тот же термин появляется более одного раза, и, наконец, они вставляют правильно отформатированный результат в итоговый документ.

Разница между \tex{placeindex} и \tex{completeindex} аналогична разнице между  \tex{content} и \tex{completecontent} (см. \in{section}[sec:completecontent]): \tex{placeindex}) ограничивается созданием индекса и его вставкой, в то время как \tex{completeindex} предварительно вставляет новую главу в итоговый документ, по умолчанию называемый \quotation{Index}, внутри которого индекс будет набран.

\stopsubsection

\startsubsection
  [title=Форматирование предметного указателя]
  \PlaceMacro{setupregister}

Предметные указатели являются частным применением более общей структуры \ConTeXt\ вызывает \quotation{\em register}; поэтому индекс форматируется с помощью команды:

\type{\setupregister[index][Configuration]}

С помощью этой команды мы можем:

\startitemize

  \starthead Определить, как будет выглядеть индекс с его различными элементами. А именно:

  \stophead   %\head only doesn't work wikth LMTX

  \startitemize

    \item Заголовки указателей, которые обычно представляют собой буквы алфавита. По умолчанию это строчные буквы. С помощью {\tt alternative=A} мы можем установить их в верхнем регистре.


    \item Сами записи и номер их страницы. Внешний вид зависит от параметров {\tt textstyle, textcolor, textcommand} и {\tt deeptextcommand} для фактической записи, а также от {\tt pagestyle, pagecolor} и {\tt pagecommand} для номера страницы. С {\tt pagenumber=no} мы также можем создать предметный указатель без номеров страниц (хотя я не знаю, может ли это быть полезно).


    \item Опция {\tt distance} измеряет ширину разделения между названием записи и номерами страниц; но он также измеряет размер отступа для подстатьи.

  \stopitemize

Я думаю, что имена опций {\tt style}, {\tt textstyle}, {\tt pagestyle}, {\tt color}, {\tt textcolor}, and {\tt pagecolor} достаточно ясны, и говорят сами за себя. Что касается {\tt command}, {\tt pagecommand}, {\tt textcommand} and {\tt deeptextcommand}, я обращаюсь к объяснению одноименных параметров в \in{section}[sec:titlestyle], касающегося конфигурации команд раздела.

  \item Чтобы установить общий вид индекса, который включает, среди прочего, команды для выполнения до ({\tt before}) или после ({\tt after}) индекса, количество столбцов, которое он должен иметь ({\tt n}), должны ли столбцы быть равными или нет ({\tt balance}), выравнивание записей ({\tt align}) и т. д.

\stopitemize

\stopsubsection

\startsubsection
  [title=Создание других индексов]
  \PlaceMacro{defineregister}\PlaceMacro{setupregister}

Я объяснил предметный указатель, как если бы в документе был возможен только один такой указатель; но правда в том, что документы могут иметь сколько угодно индексов. Например, может быть указатель личных имен, в котором собраны имена людей, упомянутых в документе, с указанием места, где они цитируются. Это все еще своего рода указатель. В юридическом тексте мы могли бы также создать специальный указатель для упоминаний Гражданского Кодекса; или, в таком документе, как настоящий, указатель макросов, объясненных в нем, и т. д.

Чтобы создать дополнительный индекс в нашем документе, мы используем команду \tex{defineregister}, синтаксис которой:

\type{\defineregister [IndexName] [Configuration]}

где {\em IndexName} -- это имя, которое будет иметь новый индекс, а  {\em Configuration} контролирует его работу. Также возможно настроить индекс позже с помощью

\type{\setupregister [IndexName] [Configuration]}

После создания нового названного индекса IndexName в нашем распоряжении будет команда {\em IndexName}, чтобы пометить записи, которые будет иметь этот индекс, аналогично тому, как записи помечаются с помощью \tex{index}. Команда \text{seeIndexName} также позволяет нам создавать записи, которые ссылаются на другие записи.

Например: мы могли бы создать указатель команд \ConTeXt\ в этом документе с помощью команды:

\type{\defineregister[macro]}

это создаст команду \tex{macro}. Это позволяет мне пометить все ссылки на команды \ConTeXt\ как элемент указателя, а затем сгенерировать указатель с помощью \tex{placemacro} или \tex{completemacro}.

\startSmallPrint

Создание нового индекса позволяет команде \tex{IndexName} отмечать его записи, а команды \tex{placeIndexName} и \tex{completeIndexName} -- для создания индекса. Но эти последние две команды на самом деле являются сокращениями двух более общих команд, применяемых к рассматриваемому индексу. Таким образом, \tex{placeIndexName} эквивалентен \tex{placeregister[IndexName]}, а \tex{completeIndexName} эквивалентен \tex{completeregister [IndexName]}.

\stopSmallPrint

\stopsubsection

\stopsection

\stopchapter

\stopcomponent

%%% Local Variables:
%%% mode: ConTeXt
%%% mode: auto-fill
%%% coding: utf-8-unix
%%% TeX-master: "../introCTX.mkiv"
%%% End:
%%% vim:set filetype=context tw=72 : %%%
